 /** @file wp3StubController.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent wp3Stub
  * 
  * Main class with code, use the yarpInterface class to communicate with the other components.
  * 
  * \section lib_sec Libraries
  *
  * None
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <Emmanuel Senft>, <PLYM>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Emmanuel Senft, PLYM 
 * Email:   emmanuel.senft@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

 
 /* 
  * Audit Trail
  * -----------
  * 20/09/2016 Version 1.0: ... (Emmanuel Senft)
  */ 

#include <boost/asio.hpp>
#include <boost/thread.hpp>
 
#ifndef WP3STUBCONTROLLER
#define WP3STUBCONTROLLER

#include <iostream>
#include <string>
#include <vector>

class Wp3StubYarpInterface;

class Wp3StubController{
private:
	Wp3StubYarpInterface* _yarpInterface;
	boost::asio::io_service *_io;
	boost::asio::deadline_timer *_t;
	int _Itime;
	boost::thread *_thr;
	void sendMutualGaze(const boost::system::error_code &e);
    void sendFaces(const boost::system::error_code &e);
    void sendSoundDirection(const boost::system::error_code &e);
    void sendIdentifyExpression(const boost::system::error_code &e);
	void wait();
public:
	/* class methods */
	Wp3StubController(Wp3StubYarpInterface *yarpInterface);
    void spamEyeGaze();
   //Need to add the methods calling/being called by the YarpInterface
};

#endif
