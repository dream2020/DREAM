 /** @file selfMonitoringDriverYarpInterface.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent selfMonitoringDriver
  * 
  * Class used to provided a simpler interface between the main code and the YARP layer.
  * Provide an output function sending data for each port, and an input function called 
  * when a message is received on a port.
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section portsc_sec Ports Created
  *
  * <b>Port types </b>
  *
  *	BufferedPort<Bottle>		proposedToSupervisorIn;
  *	BufferedPort<Bottle>		smsSummaryIn;
  *	BufferedPort<Bottle>		updatedDataIn;
  *	BufferedPort<Bottle>		affectiveStateIn;
  *	BufferedPort<VectorOf<int>>		attentionSwitchOffIn;
  *	BufferedPort<VectorOf<int>>		reactionSwitchOffIn;
  *	BufferedPort<VectorOf<double>>		therapistGazeCommandIn;
  *	BufferedPort<Bottle>		selectedActionIn;
  *	BufferedPort<Bottle>		userDelibIn;
  *	BufferedPort<VectorOf<int>>		startStopIn;
  *	BufferedPort<VectorOf<int>>		commandSuccessIn;
  *	BufferedPort<VectorOf<double>>		getChildBehaviourOut;
  *	BufferedPort<VectorOf<double>>		getChildPerformanceOut;
  *	BufferedPort<VectorOf<double>>		engagementFlagOut;
  *	BufferedPort<Bottle>		selectedBySupervisorOut;
  *	BufferedPort<Bottle>		therapistCommandOut;
  *	BufferedPort<Bottle>		deliberativeFeedbackOut;
  *	BufferedPort<VectorOf<int>>		getInterventionStatusOut;
  *	BufferedPort<Bottle>		sensorySummaryOut;
  *	BufferedPort<Bottle>		suggestedActionOut;
  *	BufferedPort<Bottle>		actionFeedbackOut;
  *	BufferedPort<Bottle>		userDataOut;
  *	BufferedPort<VectorOf<int>>		fallingInterruptionOut;
  *	BufferedPort<Bottle>		interventionCommandOut;
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <James Kennedy>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  James Kennedy, Plymouth University 
 * Email:   james.kennedy@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

 
 /* 
  * Audit Trail
  * -----------
  * 15/09/2016 Version 1.0: ... (James Kennedy)
  */ 
 
#ifndef SELFMONITORINGDRIVERYARPINTERFACE
#define SELFMONITORINGDRIVERYARPINTERFACE

#include <iostream>
#include <string>
#include <vector>
#include <sstream>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class SelfMonitoringDriverThread;
class SelfMonitoringDriverController;

class SelfMonitoringDriverYarpInterface{
private:
	SelfMonitoringDriverThread* _yarpThread;
	SelfMonitoringDriverController* _controller;

	bool _FirstRound;
public:
	/* class methods */
	SelfMonitoringDriverYarpInterface();
    void init(SelfMonitoringDriverThread* yarpThread, SelfMonitoringDriverController* controller);
	void getFromProposedToSupervisor(Bottle data);
	void getFromSmsSummary(Bottle data);
	void getFromUpdatedData(Bottle data);
	void getFromAffectiveState(Bottle data);
	void getFromAttentionSwitchOff(VectorOf<int> data);
	void getFromReactionSwitchOff(VectorOf<int> data);
	void getFromTherapistGazeCommand(VectorOf<double> data);
	void getFromSelectedAction(Bottle data);
	void getFromUserDelib(Bottle data);
	void getFromStartStop(VectorOf<int> data);
	void getFromCommandSuccess(VectorOf<int> data);
	void sendToGetChildBehaviour(double dblIn1);
    void sendToGetChildPerformance(double dblIn);
    void sendToInterventionCommand(int iOut1, int iOut2, std::string sMessage);
	void sendToEngagementFlag(double dblIn);
	void sendToSelectedBySupervisor(Bottle data);
    void sendToTherapistCommand(std::string sCommand, double dblParameter, std::string sParam1, std::string sParam2);
	void sendToDeliberativeFeedback(Bottle data);
    void sendToGetInterventionStatus();
	void sendToSensorySummary(Bottle data);
	void sendToSuggestedAction(int stepId, int actionId, std::string arg1);
    void sendToActionFeedback(int iID, int iAction, int iSuccess, int iSubpart, int iParameter);
	void sendToUserData();
    void sendToFallingInterruption(int iIn);
};

#endif
