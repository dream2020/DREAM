 /** @file selfMonitoringDriver.h 
  *
  * Version 1.0
  * 
  * 15/09/2016
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  * \section component_description Component Description
  *
  * Functionally, the component  does ...xyz...
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section parameters_sec Parameters
  * 
  * <b>Command-line Parameters </b> 
  * 
  * The following key-value pairs can be specified as command-line parameters 
  * by prefixing \c -- to the key e.g. \c --from file.ini. 
  * The value part can be changed to suit your needs; the default values are 
  * shown below. 
  *
  * - \c from \c selfMonitoringDriver.ini 
  *    - specifies the configuration file
  *
  * - \c context \c component/selfMonitoringDriver/configuration
  *   - specifies the sub-path from \c $DREAM_ROOT/release
  *   to the configuration file
  *
  * - \c name \c selfMonitoringDriver   
  *   - specifies the name of the component (used to form the stem of component port names)  
  *
  *
  * <b>Configuration File Parameters </b>
  *
  * The following key-value pairs can be specified as parameters in the configuration file 
  * (they can also be specified as command-line parameters if you so wish). 
  * The value part can be changed to suit your needs; the default values are shown below. 
  * 
  * Key | Value
  * :-- | :----  
  * _proposedToSupervisorIn | /selfMonitoringDriver/proposedToSupervisor:i
  * _smsSummaryIn | /selfMonitoringDriver/smsSummary:i
  * _updatedDataIn | /selfMonitoringDriver/updatedData:i
  * _affectiveStateIn | /selfMonitoringDriver/affectiveState:i
  * _attentionSwitchOffIn | /selfMonitoringDriver/attentionSwitchOff:i
  * _reactionSwitchOffIn | /selfMonitoringDriver/reactionSwitchOff:i
  * _therapistGazeCommandIn | /selfMonitoringDriver/therapistGazeCommand:i
  * _selectedActionIn | /selfMonitoringDriver/selectedAction:i
  * _userDelibIn | /selfMonitoringDriver/userDelib:i
  * _startStopIn | /selfMonitoringDriver/startStop:i
  * _commandSuccessIn | /selfMonitoringDriver/commandSuccess:i
  *
  * - description
  *   
  * Key | Value
  * :-- | :---- 
  * _getChildBehaviourOut | /selfMonitoringDriver/getChildBehaviour:o    
  * _getChildPerformanceOut | /selfMonitoringDriver/getChildPerformance:o    
  * _engagementFlagOut | /selfMonitoringDriver/engagementFlag:o    
  * _selectedBySupervisorOut | /selfMonitoringDriver/selectedBySupervisor:o    
  * _therapistCommandOut | /selfMonitoringDriver/therapistCommand:o    
  * _deliberativeFeedbackOut | /selfMonitoringDriver/deliberativeFeedback:o    
  * _getInterventionStatusOut | /selfMonitoringDriver/getInterventionStatus:o    
  * _sensorySummaryOut | /selfMonitoringDriver/sensorySummary:o    
  * _suggestedActionOut | /selfMonitoringDriver/suggestedAction:o    
  * _actionFeedbackOut | /selfMonitoringDriver/actionFeedback:o    
  * _userDataOut | /selfMonitoringDriver/userData:o    
  * _fallingInterruptionOut | /selfMonitoringDriver/fallingInterruption:o
  * _interventionCommandOut | /selfMonitoringDriver/interventionCommand:o
  *
  * - description
  *
  * \section portsa_sec Ports Accessed
  * 
  * - None
  *                      
  * \section portsc_sec Ports Created
  *
  * <b>Input ports</b>
  *
  *  - \c /selfMonitoringDriver
  *
  *  - \c /selfMonitoringDriver/proposedToSupervisor:i
  *  - \c /selfMonitoringDriver/smsSummary:i
  *  - \c /selfMonitoringDriver/updatedData:i
  *  - \c /selfMonitoringDriver/affectiveState:i
  *  - \c /selfMonitoringDriver/attentionSwitchOff:i
  *  - \c /selfMonitoringDriver/reactionSwitchOff:i
  *  - \c /selfMonitoringDriver/therapistGazeCommand:i
  *  - \c /selfMonitoringDriver/selectedAction:i
  *  - \c /selfMonitoringDriver/userDelib:i
  *  - \c /selfMonitoringDriver/startStop:i
  *  - \c /selfMonitoringDriver/commandSuccess:i
  *
  * <b>Output ports</b>
  *
  *  - \c /selfMonitoringDriver
  *
  *  - \c /selfMonitoringDriver/getChildBehaviour:o
  *  - \c /selfMonitoringDriver/getChildPerformance:o
  *  - \c /selfMonitoringDriver/engagementFlag:o
  *  - \c /selfMonitoringDriver/selectedBySupervisor:o
  *  - \c /selfMonitoringDriver/therapistCommand:o
  *  - \c /selfMonitoringDriver/deliberativeFeedback:o
  *  - \c /selfMonitoringDriver/getInterventionStatus:o
  *  - \c /selfMonitoringDriver/sensorySummary:o
  *  - \c /selfMonitoringDriver/suggestedAction:o
  *  - \c /selfMonitoringDriver/actionFeedback:o
  *  - \c /selfMonitoringDriver/userData:o
  *  - \c /selfMonitoringDriver/fallingInterruption:o
  *  - \c selfMonitoringDriver/interventionCommand:o
  *
  * <b>Port types </b>
  *
  * The functional specification only names the ports to be used to communicate with the component 
  * but doesn't say anything about the data transmitted on the ports. This is defined by the following code. 
  *
  * \c BufferedPort<Bottle>		proposedToSupervisorIn; 
  * \c BufferedPort<Bottle>		smsSummaryIn; 
  * \c BufferedPort<Bottle>		updatedDataIn; 
  * \c BufferedPort<Bottle>		affectiveStateIn; 
  * \c BufferedPort<VectorOf<int>>		attentionSwitchOffIn; 
  * \c BufferedPort<VectorOf<int>>		reactionSwitchOffIn; 
  * \c BufferedPort<VectorOf<double>>		therapistGazeCommandIn; 
  * \c BufferedPort<Bottle>		selectedActionIn; 
  * \c BufferedPort<Bottle>		userDelibIn; 
  * \c BufferedPort<VectorOf<int>>		startStopIn; 
  * \c BufferedPort<VectorOf<int>>		commandSuccessIn;
  * \c BufferedPort<VectorOf<double>>		getChildBehaviourOut; 
  * \c BufferedPort<VectorOf<double>>		getChildPerformanceOut; 
  * \c BufferedPort<VectorOf<double>>		engagementFlagOut; 
  * \c BufferedPort<Bottle>		selectedBySupervisorOut; 
  * \c BufferedPort<Bottle>		therapistCommandOut; 
  * \c BufferedPort<Bottle>		deliberativeFeedbackOut; 
  * \c BufferedPort<VectorOf<int>>		getInterventionStatusOut; 
  * \c BufferedPort<Bottle>		sensorySummaryOut; 
  * \c BufferedPort<Bottle>		suggestedActionOut; 
  * \c BufferedPort<Bottle>		actionFeedbackOut; 
  * \c BufferedPort<Bottle>		userDataOut; 
  * \c BufferedPort<VectorOf<int>>		fallingInterruptionOut;
  * \c BufferedPort<Bottle>		interventionCommandOut;
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \section conf_file_sec Configuration Files
  *
  * \c selfMonitoringDriver.ini   
  *
  * \section example_sec Example Instantiation of the Component
  * 
  * <tt>selfMonitoringDriver --name selfMonitoringDriver --context selfMonitoringDriver/config --from selfMonitoringDriver.ini </tt>
  *
  * \author 
  * 
  * <James Kennedy>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */
  
/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  James Kennedy, Plymouth University 
 * Email:   james.kennedy@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

  
 /* 
  * Audit Trail
  * -----------
  * 15/09/2016 Version 1.0: ... (James Kennedy)
  */ 
 
#ifndef SELFMONITORINGDRIVER
#define SELFMONITORINGDRIVER

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class SelfMonitoringDriverYarpInterface;
class SelfMonitoringDriverController;

class ProposedToSupervisorInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& proposedToSupervisorInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class SmsSummaryInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& smsSummaryInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class UpdatedDataInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& updatedDataInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class AffectiveStateInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& affectiveStateInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class AttentionSwitchOffInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& attentionSwitchOffInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class ReactionSwitchOffInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& reactionSwitchOffInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class TherapistGazeCommandInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& therapistGazeCommandInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class SelectedActionInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& selectedActionInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class UserDelibInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& userDelibInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class StartStopInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& startStopInData);
   SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
   void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class CommandSuccessInAnalyser : public BufferedPort<VectorOf<int>> {
	virtual void onRead(VectorOf<int>& commandSuccessInData);
	SelfMonitoringDriverYarpInterface *_selfMonitoringDriverYarpInterface;
public:
	void setSelfMonitoringDriver(SelfMonitoringDriverYarpInterface* yarpInterface);
};

class SelfMonitoringDriverThread : public yarp::os::Thread{
private:
	/* class variables */
	yarp::os::BufferedPort<Bottle>* _proposedToSupervisorIn;
	yarp::os::BufferedPort<Bottle>* _smsSummaryIn;
	yarp::os::BufferedPort<Bottle>* _updatedDataIn;
	yarp::os::BufferedPort<Bottle>* _affectiveStateIn;
	yarp::os::BufferedPort<VectorOf<int>>* _attentionSwitchOffIn;
	yarp::os::BufferedPort<VectorOf<int>>* _reactionSwitchOffIn;
	yarp::os::BufferedPort<VectorOf<double>>* _therapistGazeCommandIn;
	yarp::os::BufferedPort<Bottle>* _selectedActionIn;
	yarp::os::BufferedPort<Bottle>* _userDelibIn;
	yarp::os::BufferedPort<VectorOf<int>>* _startStopIn;
	yarp::os::BufferedPort<VectorOf<int>>* _commandSuccessIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getChildBehaviourOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getChildPerformanceOut;
	yarp::os::BufferedPort<VectorOf<double>>* _engagementFlagOut;
	yarp::os::BufferedPort<Bottle>* _selectedBySupervisorOut;
	yarp::os::BufferedPort<Bottle>* _therapistCommandOut;
	yarp::os::BufferedPort<Bottle>* _deliberativeFeedbackOut;
	yarp::os::BufferedPort<VectorOf<int>>* _getInterventionStatusOut;
	yarp::os::BufferedPort<Bottle>* _sensorySummaryOut;
	yarp::os::BufferedPort<Bottle>* _suggestedActionOut;
	yarp::os::BufferedPort<Bottle>* _actionFeedbackOut;
	yarp::os::BufferedPort<Bottle>* _userDataOut;
	yarp::os::BufferedPort<VectorOf<int>>* _fallingInterruptionOut;
    yarp::os::BufferedPort<Bottle>* _interventionCommandOut;
	SelfMonitoringDriverYarpInterface* _yarpInterface;
	ProposedToSupervisorInAnalyser *_proposedToSupervisorInAnalyser;
	SmsSummaryInAnalyser *_smsSummaryInAnalyser;
	UpdatedDataInAnalyser *_updatedDataInAnalyser;
	AffectiveStateInAnalyser *_affectiveStateInAnalyser;
	AttentionSwitchOffInAnalyser *_attentionSwitchOffInAnalyser;
	ReactionSwitchOffInAnalyser *_reactionSwitchOffInAnalyser;
	TherapistGazeCommandInAnalyser *_therapistGazeCommandInAnalyser;
	SelectedActionInAnalyser *_selectedActionInAnalyser;
	UserDelibInAnalyser *_userDelibInAnalyser;
	StartStopInAnalyser *_startStopInAnalyser;
	CommandSuccessInAnalyser *_commandSuccessInAnalyser;
	
public:
	/* class methods */
	SelfMonitoringDriverThread(BufferedPort<Bottle>* proposedToSupervisorIn, BufferedPort<Bottle>* smsSummaryIn, BufferedPort<Bottle>* updatedDataIn, BufferedPort<Bottle>* affectiveStateIn, BufferedPort<VectorOf<int>>* attentionSwitchOffIn, BufferedPort<VectorOf<int>>* reactionSwitchOffIn, BufferedPort<VectorOf<double>>* therapistGazeCommandIn, BufferedPort<Bottle>* selectedActionIn, BufferedPort<Bottle>* userDelibIn, BufferedPort<VectorOf<int>>* startStopIn, BufferedPort<VectorOf<int>>* commandSuccessIn, BufferedPort<VectorOf<double>>* getChildBehaviourOut, BufferedPort<VectorOf<double>>* getChildPerformanceOut, BufferedPort<VectorOf<double>>* engagementFlagOut, BufferedPort<Bottle>* selectedBySupervisorOut, BufferedPort<Bottle>* therapistCommandOut, BufferedPort<Bottle>* deliberativeFeedbackOut, BufferedPort<VectorOf<int>>* getInterventionStatusOut, BufferedPort<Bottle>* sensorySummaryOut, BufferedPort<Bottle>* suggestedActionOut, BufferedPort<Bottle>* actionFeedbackOut, BufferedPort<Bottle>* userDataOut, BufferedPort<VectorOf<int>>* fallingInterruptionOut, BufferedPort<Bottle>* interventionCommandOut);
    void setYarpInterface(SelfMonitoringDriverYarpInterface* yarpInterface);
	bool threadInit();
	void threadRelease();
	void sendToGetChildBehaviour(VectorOf<double> data);
	void sendToGetChildPerformance(VectorOf<double> data);
	void sendToEngagementFlag(VectorOf<double> data);
	void sendToSelectedBySupervisor(Bottle data);
	void sendToTherapistCommand(Bottle data);
	void sendToDeliberativeFeedback(Bottle data);
	void sendToGetInterventionStatus(VectorOf<int> data);
	void sendToSensorySummary(Bottle data);
	void sendToSuggestedAction(Bottle data);
	void sendToActionFeedback(Bottle data);
	void sendToUserData(Bottle data);
	void sendToFallingInterruption(VectorOf<int> data);
    void sendToInterventionCommand(Bottle data);
	void run();
};

class SelfMonitoringDriver : public yarp::os::RFModule{
private:
	/* module parameters */
	std::string _moduleName;
	std::string _proposedToSupervisorInName;
	std::string _smsSummaryInName;
	std::string _updatedDataInName;
	std::string _affectiveStateInName;
	std::string _attentionSwitchOffInName;
	std::string _reactionSwitchOffInName;
	std::string _therapistGazeCommandInName;
	std::string _selectedActionInName;
	std::string _userDelibInName;
	std::string _startStopInName;
	std::string _commandSuccessInName;
	std::string _getChildBehaviourOutName;
	std::string _getChildPerformanceOutName;
	std::string _engagementFlagOutName;
	std::string _selectedBySupervisorOutName;
	std::string _therapistCommandOutName;
	std::string _deliberativeFeedbackOutName;
	std::string _getInterventionStatusOutName;
	std::string _sensorySummaryOutName;
	std::string _suggestedActionOutName;
	std::string _actionFeedbackOutName;
	std::string _userDataOutName;
	std::string _fallingInterruptionOutName;
    std::string _interventionCommandOutName;
	std::string _handlerPortName;

	/* class variables */
	yarp::os::BufferedPort<Bottle> _proposedToSupervisorIn;
	yarp::os::BufferedPort<Bottle> _smsSummaryIn;
	yarp::os::BufferedPort<Bottle> _updatedDataIn;
	yarp::os::BufferedPort<Bottle> _affectiveStateIn;
	yarp::os::BufferedPort<VectorOf<int>> _attentionSwitchOffIn;
	yarp::os::BufferedPort<VectorOf<int>> _reactionSwitchOffIn;
	yarp::os::BufferedPort<VectorOf<double>> _therapistGazeCommandIn;
	yarp::os::BufferedPort<Bottle> _selectedActionIn;
	yarp::os::BufferedPort<Bottle> _userDelibIn;
	yarp::os::BufferedPort<VectorOf<int>> _startStopIn;
	yarp::os::BufferedPort<VectorOf<int>> _commandSuccessIn;
	yarp::os::BufferedPort<VectorOf<double>> _getChildBehaviourOut;
	yarp::os::BufferedPort<VectorOf<double>> _getChildPerformanceOut;
	yarp::os::BufferedPort<VectorOf<double>> _engagementFlagOut;
	yarp::os::BufferedPort<Bottle> _selectedBySupervisorOut;
	yarp::os::BufferedPort<Bottle> _therapistCommandOut;
	yarp::os::BufferedPort<Bottle> _deliberativeFeedbackOut;
	yarp::os::BufferedPort<VectorOf<int>> _getInterventionStatusOut;
	yarp::os::BufferedPort<Bottle> _sensorySummaryOut;
	yarp::os::BufferedPort<Bottle> _suggestedActionOut;
	yarp::os::BufferedPort<Bottle> _actionFeedbackOut;
	yarp::os::BufferedPort<Bottle> _userDataOut;
	yarp::os::BufferedPort<VectorOf<int>> _fallingInterruptionOut;
    yarp::os::BufferedPort<Bottle> _interventionCommandOut;
	yarp::os::Port _handlerPort;

	/* pointer to a new thread */
	SelfMonitoringDriverThread* _selfMonitoringDriverThread;
    SelfMonitoringDriverController* _selfMonitoringDriverController;
    SelfMonitoringDriverYarpInterface* _selfMonitoringDriverYarpInterface;
public:
	/* class methods */
	bool configure(yarp::os::ResourceFinder &rf);
	bool interruptModule();
	bool close();
	bool respond(const yarp::os::Bottle& command, Bottle& reply);
	double getPeriod();
	bool updateModule();
};

#endif
