 /** @file naoInterfaceDriverController.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent naoInterfaceDriver
  * 
  * Main class with code, use the yarpInterface class to communicate with the other components.
  * 
  * \section lib_sec Libraries
  *
  * None
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <Emmanuel Senft>, <PLYM>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Emmanuel Senft, PLYM 
 * Email:   emmanuel.senft@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

 
 /* 
  * Audit Trail
  * -----------
  * 16/08/2016 Version 1.0: ... (Emmanuel Senft)
  */ 
 
#ifndef NAOINTERFACEDRIVERCONTROLLER
#define NAOINTERFACEDRIVERCONTROLLER

#include <iostream>
#include <string>
#include <vector>

class DeliberativeSubsystemYarpInterface;
class Waiter;

class NaoInterfaceDriverYarpInterface;
class CommonFunctionalities;

class NaoInterfaceDriverController{
private:
	NaoInterfaceDriverYarpInterface* _yarpInterface;
	Waiter* _waiter;
	CommonFunctionalities* _common;
public:
	/* class methods */
	NaoInterfaceDriverController(NaoInterfaceDriverYarpInterface *yarpInterface);
	void getFromSensorsFeedbacks(std::string message, int value);
	void getFromMotorFeedbacks(int stepId, int actionId, int message);
	void closeHand(bool rightHand, bool close, int stepId);
	void enableRobot(bool enable, int stepId);
	void say(std::string sentence, int stepId);
	void move(int stepId, int actionId);
	void lookAt(float x, float y, float z, float speed, int stepId);
	void pointAt(std::vector<std::vector<float>> goals, bool rightArm, int stepId);
	void testAll();
	void generatePointAt(int actionId);
	void goNextStep();
	void waitms(int millisec);
	void blink(int step, int repetition, int fullLeds, int duration);
	void moveHand();

   //Need to add the methods calling/being called by the YarpInterface
};

#endif
