 /** @file naoInterfaceDriver.h 
  *
  * Version 1.0
  * 
  * 16/08/2016
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  * \section component_description Component Description
  *
  * Functionally, the component  does ...xyz...
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section parameters_sec Parameters
  * 
  * <b>Command-line Parameters </b> 
  * 
  * The following key-value pairs can be specified as command-line parameters 
  * by prefixing \c -- to the key e.g. \c --from file.ini. 
  * The value part can be changed to suit your needs; the default values are 
  * shown below. 
  *
  * - \c from \c naoInterfaceDriver.ini 
  *    - specifies the configuration file
  *
  * - \c context \c component/naoInterfaceDriver/configuration
  *   - specifies the sub-path from \c $DREAM_ROOT/release
  *   to the configuration file
  *
  * - \c name \c naoInterfaceDriver   
  *   - specifies the name of the component (used to form the stem of component port names)  
  *
  *
  * <b>Configuration File Parameters </b>
  *
  * The following key-value pairs can be specified as parameters in the configuration file 
  * (they can also be specified as command-line parameters if you so wish). 
  * The value part can be changed to suit your needs; the default values are shown below. 
  * 
  * Key | Value
  * :-- | :----  
  * _sensorFeedbackIn | /naoInterfaceDriver/sensorFeedback:i
  * _robotMotorFeedbackIn | /naoInterfaceDriver/robotMotorFeedback:i
  *
  * - description
  *   
  * Key | Value
  * :-- | :---- 
  * _disableRobotOut | /naoInterfaceDriver/disableRobot:o    
  * _enableRobotOut | /naoInterfaceDriver/enableRobot:o    
  * _gripOut | /naoInterfaceDriver/grip:o    
  * _moveHandOut | /naoInterfaceDriver/moveHand:o    
  * _moveTorsoOut | /naoInterfaceDriver/moveTorso:o    
  * _releaseOut | /naoInterfaceDriver/release:o    
  * _sayOut | /naoInterfaceDriver/say:o    
  * _moveSequenceOut | /naoInterfaceDriver/moveSequence:o    
  * _moveHeadOut | /naoInterfaceDriver/moveHead:o    
  * _pointAtOut | /naoInterfaceDriver/pointAt:o    
  *
  * - description
  *
  * \section portsa_sec Ports Accessed
  * 
  * - None
  *                      
  * \section portsc_sec Ports Created
  *
  * <b>Input ports</b>
  *
  *  - \c /naoInterfaceDriver
  *
  *  - \c /naoInterfaceDriver/sensorFeedback:i
  *  - \c /naoInterfaceDriver/robotMotorFeedback:i
  *
  * <b>Output ports</b>
  *
  *  - \c /naoInterfaceDriver
  *
  *  - \c /naoInterfaceDriver/disableRobot:o
  *  - \c /naoInterfaceDriver/enableRobot:o
  *  - \c /naoInterfaceDriver/grip:o
  *  - \c /naoInterfaceDriver/moveHand:o
  *  - \c /naoInterfaceDriver/moveTorso:o
  *  - \c /naoInterfaceDriver/release:o
  *  - \c /naoInterfaceDriver/say:o
  *  - \c /naoInterfaceDriver/moveSequence:o
  *  - \c /naoInterfaceDriver/moveHead:o
  *  - \c /naoInterfaceDriver/pointAt:o
  *
  * <b>Port types </b>
  *
  * The functional specification only names the ports to be used to communicate with the component 
  * but doesn't say anything about the data transmitted on the ports. This is defined by the following code. 
  *
  * \c BufferedPort<Bottle>		sensorFeedbackIn; 
  * \c BufferedPort<Bottle>		robotMotorFeedbackIn; 
  * \c BufferedPort<VectorOf<int>>		disableRobotOut; 
  * \c BufferedPort<VectorOf<int>>		enableRobotOut; 
  * \c BufferedPort<VectorOf<int>>		gripOut; 
  * \c BufferedPort<VectorOf<double>>		moveHandOut; 
  * \c BufferedPort<VectorOf<double>>		moveTorsoOut; 
  * \c BufferedPort<VectorOf<int>>		releaseOut; 
  * \c BufferedPort<Bottle>		sayOut; 
  * \c BufferedPort<VectorOf<int>>		moveSequenceOut; 
  * \c BufferedPort<VectorOf<double>>		moveHeadOut; 
  * \c BufferedPort<VectorOf<float>>		pointAtOut; 
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \section conf_file_sec Configuration Files
  *
  * \c naoInterfaceDriver.ini   
  *
  * \section example_sec Example Instantiation of the Component
  * 
  * <tt>naoInterfaceDriver --name naoInterfaceDriver --context naoInterfaceDriver/config --from naoInterfaceDriver.ini </tt>
  *
  * \author 
  * 
  * <Emmanuel Senft>, <PLYM>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */
  
/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Emmanuel Senft, PLYM 
 * Email:   emmanuel.senft@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

  
 /* 
  * Audit Trail
  * -----------
  * 16/08/2016 Version 1.0: ... (Emmanuel Senft)
  */ 
 
#ifndef NAOINTERFACEDRIVER
#define NAOINTERFACEDRIVER

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class NaoInterfaceDriverYarpInterface;
class NaoInterfaceDriverController;

class SensorFeedbackInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& sensorFeedbackInData);
   NaoInterfaceDriverYarpInterface *_naoInterfaceDriverYarpInterface;
public:
   void setNaoInterfaceDriver(NaoInterfaceDriverYarpInterface* yarpInterface);
};

class RobotMotorFeedbackInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& robotMotorFeedbackInData);
   NaoInterfaceDriverYarpInterface *_naoInterfaceDriverYarpInterface;
public:
   void setNaoInterfaceDriver(NaoInterfaceDriverYarpInterface* yarpInterface);
};



class NaoInterfaceDriverThread : public yarp::os::Thread{
private:
	/* class variables */
	yarp::os::BufferedPort<Bottle>* _sensorFeedbackIn;
	yarp::os::BufferedPort<Bottle>* _robotMotorFeedbackIn;
	yarp::os::BufferedPort<VectorOf<int>>* _disableRobotOut;
	yarp::os::BufferedPort<VectorOf<int>>* _enableRobotOut;
	yarp::os::BufferedPort<VectorOf<int>>* _gripOut;
	yarp::os::BufferedPort<VectorOf<double>>* _moveHandOut;
	yarp::os::BufferedPort<VectorOf<double>>* _moveTorsoOut;
	yarp::os::BufferedPort<VectorOf<int>>* _releaseOut;
	yarp::os::BufferedPort<Bottle>* _sayOut;
	yarp::os::BufferedPort<VectorOf<int>>* _moveSequenceOut;
	yarp::os::BufferedPort<VectorOf<double>>* _moveHeadOut;
	yarp::os::BufferedPort<VectorOf<float>>* _pointAtOut;
	NaoInterfaceDriverYarpInterface* _yarpInterface;
	SensorFeedbackInAnalyser *_sensorFeedbackInAnalyser;
	RobotMotorFeedbackInAnalyser *_robotMotorFeedbackInAnalyser;
	
public:
	/* class methods */
	NaoInterfaceDriverThread(BufferedPort<Bottle>* sensorFeedbackIn, BufferedPort<Bottle>* robotMotorFeedbackIn, BufferedPort<VectorOf<int>>* disableRobotOut, BufferedPort<VectorOf<int>>* enableRobotOut, BufferedPort<VectorOf<int>>* gripOut, BufferedPort<VectorOf<double>>* moveHandOut, BufferedPort<VectorOf<double>>* moveTorsoOut, BufferedPort<VectorOf<int>>* releaseOut, BufferedPort<Bottle>* sayOut, BufferedPort<VectorOf<int>>* moveSequenceOut, BufferedPort<VectorOf<double>>* moveHeadOut, BufferedPort<VectorOf<float>>* pointAtOut);
   void setYarpInterface(NaoInterfaceDriverYarpInterface* yarpInterface);
	bool threadInit();
	void threadRelease();
	void sendToDisableRobot(VectorOf<int> data);
	void sendToEnableRobot(VectorOf<int> data);
	void sendToGrip(VectorOf<int> data);
	void sendToMoveHand(VectorOf<double> data);
	void sendToMoveTorso(VectorOf<double> data);
	void sendToRelease(VectorOf<int> data);
	void sendToSay(Bottle data);
	void sendToMoveSequence(VectorOf<int> data);
	void sendToMoveHead(VectorOf<double> data);
	void sendToPointAt(VectorOf<float> data);
	void run();
};

class NaoInterfaceDriver : public yarp::os::RFModule{
private:
	/* module parameters */
	std::string _moduleName;
	std::string _sensorFeedbackInName;
	std::string _robotMotorFeedbackInName;
	std::string _disableRobotOutName;
	std::string _enableRobotOutName;
	std::string _gripOutName;
	std::string _moveHandOutName;
	std::string _moveTorsoOutName;
	std::string _releaseOutName;
	std::string _sayOutName;
	std::string _moveSequenceOutName;
	std::string _moveHeadOutName;
	std::string _pointAtOutName;
	std::string _handlerPortName;

	/* class variables */
	yarp::os::BufferedPort<Bottle> _sensorFeedbackIn;
	yarp::os::BufferedPort<Bottle> _robotMotorFeedbackIn;
	yarp::os::BufferedPort<VectorOf<int>> _disableRobotOut;
	yarp::os::BufferedPort<VectorOf<int>> _enableRobotOut;
	yarp::os::BufferedPort<VectorOf<int>> _gripOut;
	yarp::os::BufferedPort<VectorOf<double>> _moveHandOut;
	yarp::os::BufferedPort<VectorOf<double>> _moveTorsoOut;
	yarp::os::BufferedPort<VectorOf<int>> _releaseOut;
	yarp::os::BufferedPort<Bottle> _sayOut;
	yarp::os::BufferedPort<VectorOf<int>> _moveSequenceOut;
	yarp::os::BufferedPort<VectorOf<double>> _moveHeadOut;
	yarp::os::BufferedPort<VectorOf<float>> _pointAtOut;
	yarp::os::Port _handlerPort;

	/* pointer to a new thread */
	NaoInterfaceDriverThread* _naoInterfaceDriverThread;
   NaoInterfaceDriverController* _naoInterfaceDriverController;
   NaoInterfaceDriverYarpInterface* _naoInterfaceDriverYarpInterface;
public:
	/* class methods */
	bool configure(yarp::os::ResourceFinder &rf);
	bool interruptModule();
	bool close();
	bool respond(const yarp::os::Bottle& command, Bottle& reply);
	double getPeriod();
	bool updateModule();
};

#endif
