 /** @file actuationDriver.h Interface file for actuationDriver Component
  *
  * Version 1.0
  * 
  * 25/10/2016
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  * \section component_description Component Description
  *
  * Functionally, the component  does ...xyz...
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section parameters_sec Parameters
  * 
  * <b>Command-line Parameters </b> 
  * 
  * The following key-value pairs can be specified as command-line parameters 
  * by prefixing \c -- to the key e.g. \c --from file.ini. 
  * The value part can be changed to suit your needs; the default values are 
  * shown below. 
  *
  * - \c from \c actuationDriver.ini 
  *    - specifies the configuration file
  *
  * - \c context \c component/actuationDriver/configuration
  *   - specifies the sub-path from \c $DREAM_ROOT/release
  *   to the configuration file
  *
  * - \c name \c actuationDriver   
  *   - specifies the name of the component (used to form the stem of component port names)  
  *
  *
  * <b>Configuration File Parameters </b>
  *
  * The following key-value pairs can be specified as parameters in the configuration file 
  * (they can also be specified as command-line parameters if you so wish). 
  * The value part can be changed to suit your needs; the default values are shown below. 
  * 
  * Key | Value
  * :-- | :----  
  * _disableRobotIn | /actuationDriver/disableRobot:i
  * _enableRobotIn | /actuationDriver/enableRobot:i
  * _gripIn | /actuationDriver/grip:i
  * _moveHandIn | /actuationDriver/moveHand:i
  * _moveHeadIn | /actuationDriver/moveHead:i
  * _moveSequenceIn | /actuationDriver/moveSequence:i
  * _moveTorsoIn | /actuationDriver/moveTorso:i
  * _pointAtIn | /actuationDriver/pointAt:i
  * _releaseIn | /actuationDriver/release:i
  * _sayIn | /actuationDriver/say:i
  * _sandtrayCommandIn | /actuationDriver/sandtrayCommand:i
  * _actionFeedbackIn | /actuationDriver/actionFeedback:i
  * _robotSensorsIn | /actuationDriver/robotSensors:i
  *
  * - description
  *   
  * Key | Value
  * :-- | :---- 
  * _eyeBlinkingOut | /actuationDriver/eyeBlinking:o    
  * _fallingReactionOut | /actuationDriver/fallingReaction:o    
  * _fallingReactionSpeechOut | /actuationDriver/fallingReactionSpeech:o    
  * _socialFacialExpressionOut | /actuationDriver/socialFacialExpression:o    
  * _socialReactionOut | /actuationDriver/socialReaction:o    
  * _socialReactionSpeechOut | /actuationDriver/socialReactionSpeech:o    
  * _robotMotorFeedbackOut | /actuationDriver/robotMotorFeedback:o    
  * _selectedActionOut | /actuationDriver/selectedAction:o    
  * _sandtrayReturnOut | /actuationDriver/sandtrayReturn:o    
  * _sensorFeedbackOut | /actuationDriver/sensorFeedback:o    
  * _moveHeadOut | /actuationDriver/moveHead:o
  * _fallingInterruptionOut | /actuationDriver/fallingInterruption:o    
  * _elicitedAttentionOut | /actuationDriver/elicitedAttention:o    
  *
  * - description
  *
  * \section portsa_sec Ports Accessed
  * 
  * - None
  *                      
  * \section portsc_sec Ports Created
  *
  * <b>Input ports</b>
  *
  *  - \c /actuationDriver
  *
  *  - \c /actuationDriver/disableRobot:i
  *  - \c /actuationDriver/enableRobot:i
  *  - \c /actuationDriver/grip:i
  *  - \c /actuationDriver/moveHand:i
  *  - \c /actuationDriver/moveHead:i
  *  - \c /actuationDriver/moveSequence:i
  *  - \c /actuationDriver/moveTorso:i
  *  - \c /actuationDriver/pointAt:i
  *  - \c /actuationDriver/release:i
  *  - \c /actuationDriver/say:i
  *  - \c /actuationDriver/sandtrayCommand:i
  *  - \c /actuationDriver/actionFeedback:i
  *  - \c /actuationDriver/robotSensors:i
  *
  * <b>Output ports</b>
  *
  *  - \c /actuationDriver
  *
  *  - \c /actuationDriver/eyeBlinking:o
  *  - \c /actuationDriver/fallingReaction:o
  *  - \c /actuationDriver/fallingReactionSpeech:o
  *  - \c /actuationDriver/socialFacialExpression:o
  *  - \c /actuationDriver/socialReaction:o
  *  - \c /actuationDriver/socialReactionSpeech:o
  *  - \c /actuationDriver/robotMotorFeedback:o
  *  - \c /actuationDriver/selectedAction:o
  *  - \c /actuationDriver/sandtrayReturn:o
  *  - \c /actuationDriver/sensorFeedback:o
  *  - \c /actuationDriver/moveHead:o
  *  - \c /actuationDriver/fallingInterruption:o
  *  - \c /actuationDriver/elicitedAttention:o
  *
  * <b>Port types </b>
  *
  * The functional specification only names the ports to be used to communicate with the component 
  * but doesn't say anything about the data transmitted on the ports. This is defined by the following code. 
  *
  * \c BufferedPort<VectorOf<int>>		disableRobotIn; 
  * \c BufferedPort<VectorOf<int>>		enableRobotIn; 
  * \c BufferedPort<VectorOf<int>>		gripIn; 
  * \c BufferedPort<VectorOf<double>>		moveHandIn; 
  * \c BufferedPort<VectorOf<double>>		moveHeadIn; 
  * \c BufferedPort<VectorOf<int>>		moveSequenceIn; 
  * \c BufferedPort<VectorOf<double>>		moveTorsoIn; 
  * \c BufferedPort<VectorOf<float>>		pointAtIn; 
  * \c BufferedPort<VectorOf<int>>		releaseIn; 
  * \c BufferedPort<Bottle>		sayIn; 
  * \c BufferedPort<Bottle>		sandtrayCommandIn; 
  * \c BufferedPort<Bottle>		actionFeedbackIn; 
  * \c BufferedPort<Bottle>		robotSensorsIn; 
  * \c BufferedPort<Bottle>		eyeBlinkingOut; 
  * \c BufferedPort<VectorOf<int>>		fallingReactionOut; 
  * \c BufferedPort<VectorOf<int>>		fallingReactionSpeechOut; 
  * \c BufferedPort<VectorOf<int>>		socialFacialExpressionOut; 
  * \c BufferedPort<VectorOf<int>>		socialReactionOut; 
  * \c BufferedPort<VectorOf<int>>		socialReactionSpeechOut; 
  * \c BufferedPort<Bottle>		robotMotorFeedbackOut; 
  * \c BufferedPort<Bottle>		selectedActionOut; 
  * \c BufferedPort<Bottle>		sandtrayReturnOut; 
  * \c BufferedPort<Bottle>		sensorFeedbackOut; 
  * \c BufferedPort<VectorOf<double>>		moveHeadOut; 
  * \c BufferedPort<VectorOf<int>>		fallingInterruptionOut; 
  * \c BufferedPort<VectorOf<double>>		elicitedAttentionOut; 
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \section conf_file_sec Configuration Files
  *
  * \c actuationDriver.ini   
  *
  * \section example_sec Example Instantiation of the Component
  * 
  * <tt>actuationDriver --name actuationDriver --context actuationDriver/config --from actuationDriver.ini </tt>
  *
  * \author 
  * 
  * <Emmanuel Senft>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */
  
/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Emmanuel Senft, Plymouth University 
 * Email:   emmanuel.senft@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

  
 /* 
  * Audit Trail
  * -----------
  * 25/10/2016 Version 1.0: ... (Emmanuel Senft)
  */ 
 
#ifndef ACTUATIONDRIVER
#define ACTUATIONDRIVER

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class ActuationDriverYarpInterface;
class ActuationDriverController;

class DisableRobotInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& disableRobotInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class EnableRobotInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& enableRobotInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class GripInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& gripInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class MoveHandInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& moveHandInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class MoveHeadInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& moveHeadInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class MoveSequenceInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& moveSequenceInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class MoveTorsoInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& moveTorsoInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class PointAtInAnalyser : public BufferedPort<VectorOf<float>>{
   virtual void onRead(VectorOf<float>& pointAtInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class ReleaseInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& releaseInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class SayInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& sayInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class SandtrayCommandInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& sandtrayCommandInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class ActionFeedbackInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& actionFeedbackInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};

class RobotSensorsInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& robotSensorsInData);
   ActuationDriverYarpInterface *_actuationDriverYarpInterface;
public:
   void setActuationDriver(ActuationDriverYarpInterface* yarpInterface);
};



class ActuationDriverThread : public yarp::os::Thread{
private:
	/* class variables */
	yarp::os::BufferedPort<VectorOf<int>>* _disableRobotIn;
	yarp::os::BufferedPort<VectorOf<int>>* _enableRobotIn;
	yarp::os::BufferedPort<VectorOf<int>>* _gripIn;
	yarp::os::BufferedPort<VectorOf<double>>* _moveHandIn;
	yarp::os::BufferedPort<VectorOf<double>>* _moveHeadIn;
	yarp::os::BufferedPort<VectorOf<int>>* _moveSequenceIn;
	yarp::os::BufferedPort<VectorOf<double>>* _moveTorsoIn;
	yarp::os::BufferedPort<VectorOf<float>>* _pointAtIn;
	yarp::os::BufferedPort<VectorOf<int>>* _releaseIn;
	yarp::os::BufferedPort<Bottle>* _sayIn;
	yarp::os::BufferedPort<Bottle>* _sandtrayCommandIn;
	yarp::os::BufferedPort<Bottle>* _actionFeedbackIn;
	yarp::os::BufferedPort<Bottle>* _robotSensorsIn;
	yarp::os::BufferedPort<Bottle>* _eyeBlinkingOut;
	yarp::os::BufferedPort<VectorOf<int>>* _fallingReactionOut;
	yarp::os::BufferedPort<VectorOf<int>>* _fallingReactionSpeechOut;
	yarp::os::BufferedPort<VectorOf<int>>* _socialFacialExpressionOut;
	yarp::os::BufferedPort<VectorOf<int>>* _socialReactionOut;
	yarp::os::BufferedPort<VectorOf<int>>* _socialReactionSpeechOut;
	yarp::os::BufferedPort<Bottle>* _robotMotorFeedbackOut;
	yarp::os::BufferedPort<Bottle>* _selectedActionOut;
	yarp::os::BufferedPort<Bottle>* _sandtrayReturnOut;
	yarp::os::BufferedPort<Bottle>* _sensorFeedbackOut;
	yarp::os::BufferedPort<VectorOf<double>>* _moveHeadOut;
	yarp::os::BufferedPort<VectorOf<int>>* _fallingInterruptionOut;
	yarp::os::BufferedPort<VectorOf<double>>* _elicitedAttentionOut;
	ActuationDriverYarpInterface* _yarpInterface;
	DisableRobotInAnalyser *_disableRobotInAnalyser;
	EnableRobotInAnalyser *_enableRobotInAnalyser;
	GripInAnalyser *_gripInAnalyser;
	MoveHandInAnalyser *_moveHandInAnalyser;
	MoveHeadInAnalyser *_moveHeadInAnalyser;
	MoveSequenceInAnalyser *_moveSequenceInAnalyser;
	MoveTorsoInAnalyser *_moveTorsoInAnalyser;
	PointAtInAnalyser *_pointAtInAnalyser;
	ReleaseInAnalyser *_releaseInAnalyser;
	SayInAnalyser *_sayInAnalyser;
	SandtrayCommandInAnalyser *_sandtrayCommandInAnalyser;
	ActionFeedbackInAnalyser *_actionFeedbackInAnalyser;
	RobotSensorsInAnalyser *_robotSensorsInAnalyser;
	
public:
	/* class methods */
	ActuationDriverThread(BufferedPort<VectorOf<int>>* disableRobotIn, BufferedPort<VectorOf<int>>* enableRobotIn, BufferedPort<VectorOf<int>>* gripIn, BufferedPort<VectorOf<double>>* moveHandIn, BufferedPort<VectorOf<double>>* moveHeadIn, BufferedPort<VectorOf<int>>* moveSequenceIn, BufferedPort<VectorOf<double>>* moveTorsoIn, BufferedPort<VectorOf<float>>* pointAtIn, BufferedPort<VectorOf<int>>* releaseIn, BufferedPort<Bottle>* sayIn, BufferedPort<Bottle>* sandtrayCommandIn, BufferedPort<Bottle>* actionFeedbackIn, BufferedPort<Bottle>* robotSensorsIn, BufferedPort<Bottle>* eyeBlinkingOut, BufferedPort<VectorOf<int>>* fallingReactionOut, BufferedPort<VectorOf<int>>* fallingReactionSpeechOut, BufferedPort<VectorOf<int>>* socialFacialExpressionOut, BufferedPort<VectorOf<int>>* socialReactionOut, BufferedPort<VectorOf<int>>* socialReactionSpeechOut, BufferedPort<Bottle>* robotMotorFeedbackOut, BufferedPort<Bottle>* selectedActionOut, BufferedPort<Bottle>* sandtrayReturnOut, BufferedPort<Bottle>* sensorFeedbackOut, BufferedPort<VectorOf<double>>* moveHeadOut, BufferedPort<VectorOf<int>>* fallingInterruptionOut, BufferedPort<VectorOf<double>>* elicitedAttentionOut);
   void setYarpInterface(ActuationDriverYarpInterface* yarpInterface);
	bool threadInit();
	void threadRelease();
	void sendToEyeBlinking(Bottle data);
	void sendToFallingReaction(VectorOf<int> data);
	void sendToFallingReactionSpeech(VectorOf<int> data);
	void sendToSocialFacialExpression(VectorOf<int> data);
	void sendToSocialReaction(VectorOf<int> data);
	void sendToSocialReactionSpeech(VectorOf<int> data);
	void sendToRobotMotorFeedback(Bottle data);
	void sendToSelectedAction(Bottle data);
	void sendToSandtrayReturn(Bottle data);
	void sendToSensorFeedback(Bottle data);
	void sendToMoveHead(VectorOf<double> data);
	void sendToFallingInterruption(VectorOf<int> data);
	void sendToElicitedAttention(VectorOf<double> data);
	void run();
};

class ActuationDriver : public yarp::os::RFModule{
private:
	/* module parameters */
	std::string _moduleName;
	std::string _disableRobotInName;
	std::string _enableRobotInName;
	std::string _gripInName;
	std::string _moveHandInName;
	std::string _moveHeadInName;
	std::string _moveSequenceInName;
	std::string _moveTorsoInName;
	std::string _pointAtInName;
	std::string _releaseInName;
	std::string _sayInName;
	std::string _sandtrayCommandInName;
	std::string _actionFeedbackInName;
	std::string _robotSensorsInName;
	std::string _eyeBlinkingOutName;
	std::string _fallingReactionOutName;
	std::string _fallingReactionSpeechOutName;
	std::string _socialFacialExpressionOutName;
	std::string _socialReactionOutName;
	std::string _socialReactionSpeechOutName;
	std::string _robotMotorFeedbackOutName;
	std::string _selectedActionOutName;
	std::string _sandtrayReturnOutName;
	std::string _sensorFeedbackOutName;
	std::string _moveHeadOutName;
	std::string _fallingInterruptionOutName;
	std::string _elicitedAttentionOutName;
	std::string _handlerPortName;

	/* class variables */
	yarp::os::BufferedPort<VectorOf<int>> _disableRobotIn;
	yarp::os::BufferedPort<VectorOf<int>> _enableRobotIn;
	yarp::os::BufferedPort<VectorOf<int>> _gripIn;
	yarp::os::BufferedPort<VectorOf<double>> _moveHandIn;
	yarp::os::BufferedPort<VectorOf<double>> _moveHeadIn;
	yarp::os::BufferedPort<VectorOf<int>> _moveSequenceIn;
	yarp::os::BufferedPort<VectorOf<double>> _moveTorsoIn;
	yarp::os::BufferedPort<VectorOf<float>> _pointAtIn;
	yarp::os::BufferedPort<VectorOf<int>> _releaseIn;
	yarp::os::BufferedPort<Bottle> _sayIn;
	yarp::os::BufferedPort<Bottle> _sandtrayCommandIn;
	yarp::os::BufferedPort<Bottle> _actionFeedbackIn;
	yarp::os::BufferedPort<Bottle> _robotSensorsIn;
	yarp::os::BufferedPort<Bottle> _eyeBlinkingOut;
	yarp::os::BufferedPort<VectorOf<int>> _fallingReactionOut;
	yarp::os::BufferedPort<VectorOf<int>> _fallingReactionSpeechOut;
	yarp::os::BufferedPort<VectorOf<int>> _socialFacialExpressionOut;
	yarp::os::BufferedPort<VectorOf<int>> _socialReactionOut;
	yarp::os::BufferedPort<VectorOf<int>> _socialReactionSpeechOut;
	yarp::os::BufferedPort<Bottle> _robotMotorFeedbackOut;
	yarp::os::BufferedPort<Bottle> _selectedActionOut;
	yarp::os::BufferedPort<Bottle> _sandtrayReturnOut;
	yarp::os::BufferedPort<Bottle> _sensorFeedbackOut;
	yarp::os::BufferedPort<VectorOf<double>> _moveHeadOut;
	yarp::os::BufferedPort<VectorOf<int>> _fallingInterruptionOut;
	yarp::os::BufferedPort<VectorOf<double>> _elicitedAttentionOut;
	yarp::os::Port _handlerPort;

	/* pointer to a new thread */
	ActuationDriverThread* _actuationDriverThread;
   ActuationDriverController* _actuationDriverController;
   ActuationDriverYarpInterface* _actuationDriverYarpInterface;
public:
	/* class methods */
	bool configure(yarp::os::ResourceFinder &rf);
	bool interruptModule();
	bool close();
	bool respond(const yarp::os::Bottle& command, Bottle& reply);
	double getPeriod();
	bool updateModule();
};

#endif
