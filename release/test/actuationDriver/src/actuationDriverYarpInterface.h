 /** @file actuationDriverYarpInterface.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent actuationDriver
  * 
  * Class used to provided a simpler interface between the main code and the YARP layer.
  * Provide an output function sending data for each port, and an input function called 
  * when a message is received on a port.
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section portsc_sec Ports Created
  *
  * <b>Port types </b>
  *
  *	BufferedPort<VectorOf<int>>		disableRobotIn;
  *	BufferedPort<VectorOf<int>>		enableRobotIn;
  *	BufferedPort<VectorOf<int>>		gripIn;
  *	BufferedPort<VectorOf<double>>		moveHandIn;
  *	BufferedPort<VectorOf<double>>		moveHeadIn;
  *	BufferedPort<VectorOf<int>>		moveSequenceIn;
  *	BufferedPort<VectorOf<double>>		moveTorsoIn;
  *	BufferedPort<VectorOf<float>>		pointAtIn;
  *	BufferedPort<VectorOf<int>>		releaseIn;
  *	BufferedPort<Bottle>		sayIn;
  *	BufferedPort<Bottle>		sandtrayCommandIn;
  *	BufferedPort<Bottle>		actionFeedbackIn;
  *	BufferedPort<Bottle>		robotSensorsIn;
  *	BufferedPort<Bottle>		eyeBlinkingOut;
  *	BufferedPort<VectorOf<int>>		fallingReactionOut;
  *	BufferedPort<VectorOf<int>>		fallingReactionSpeechOut;
  *	BufferedPort<VectorOf<int>>		socialFacialExpressionOut;
  *	BufferedPort<VectorOf<int>>		socialReactionOut;
  *	BufferedPort<VectorOf<int>>		socialReactionSpeechOut;
  *	BufferedPort<Bottle>		robotMotorFeedbackOut;
  *	BufferedPort<Bottle>		selectedActionOut;
  *	BufferedPort<Bottle>		sandtrayReturnOut;
  *	BufferedPort<Bottle>		sensorFeedbackOut;
  *	BufferedPort<VectorOf<double>>		moveHeadOut;
  *	BufferedPort<VectorOf<int>>		fallingInterruptionOut;
  *	BufferedPort<VectorOf<double>>		elicitedAttentionOut;
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <Emmanuel Senft>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Emmanuel Senft, Plymouth University 
 * Email:   emmanuel.senft@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

 
 /* 
  * Audit Trail
  * -----------
  * 25/10/2016 Version 1.0: ... (Emmanuel Senft)
  */ 
 
#ifndef ACTUATIONDRIVERYARPINTERFACE
#define ACTUATIONDRIVERYARPINTERFACE

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class ActuationDriverThread;
class ActuationDriverController;

class ActuationDriverYarpInterface{
private:
	ActuationDriverThread* _yarpThread;
   ActuationDriverController* _controller;
public:
	/* class methods */
	ActuationDriverYarpInterface();
   void init(ActuationDriverThread* yarpThread, ActuationDriverController* controller);
	void getFromDisableRobot(VectorOf<int> data);
	void getFromEnableRobot(VectorOf<int> data);
	void getFromGrip(VectorOf<int> data);
	void getFromMoveHand(VectorOf<double> data);
	void getFromMoveHead(VectorOf<double> data);
	void getFromMoveSequence(VectorOf<int> data);
	void getFromMoveTorso(VectorOf<double> data);
	void getFromPointAt(VectorOf<float> data);
	void getFromRelease(VectorOf<int> data);
	void getFromSay(Bottle data);
	void getFromSandtrayCommand(Bottle data);
	void getFromActionFeedback(Bottle data);
	void getFromRobotSensors(Bottle data);
	void sendToEyeBlinking(std::string repetition, std::string type, std::string duration);
	void sendToFallingReaction(bool falling);
	void sendToFallingReactionSpeech(bool falling);
	void sendToSocialFacialExpression(int socialFacialReaction);
	void sendToSocialReaction(int socialReactionSpeech);
	void sendToSocialReactionSpeech(int socialFacialReaction);
	void sendToRobotMotorFeedback(int step, int action);
	void sendToSelectedAction(int stepId, int actionId, std::string argument);
	void sendToSelectedAction(int stepId, int actionId, int argument);
	void sendToSelectedAction(int stepId, int actionId);
	void sendToSandtrayReturn(std::string message);
	void sendToSensorFeedback(std::string name, bool value);
	void sendToMoveHead(VectorOf<double> data);
	void sendToFallingInterruption(VectorOf<int> data);
	void sendToElicitedAttention(double x, double y, double z);
};

#endif
