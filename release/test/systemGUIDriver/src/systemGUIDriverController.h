 /** @file systemGUIDriverController.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent systemGUIDriver
  * 
  * Main class with code, use the yarpInterface class to communicate with the other components.
  * 
  * \section lib_sec Libraries
  *
  * None
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <Hoang-Long Cao>, <Vrije Universiteit Brussel>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Hoang-Long Cao, Vrije Universiteit Brussel 
 * Email:   hoang.long.cao@vub.ac.be 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

 
 /* 
  * Audit Trail
  * -----------
  * 14/11/2016 Version 1.0: ... (Hoang-Long Cao)
  */ 
 
#ifndef SYSTEMGUIDRIVERCONTROLLER
#define SYSTEMGUIDRIVERCONTROLLER

#define BOOST_FILESYSTEM_VERSION 3
#define BOOST_FILESYSTEM_NO_DEPRECATED 
#include <boost/thread/thread.hpp>

#include <iostream>
#include <string>
#include <vector>
#include <windows.h> 
#include <sstream>

#include "actionMessages.h"

using namespace std;

class SystemGUIDriverYarpInterface;

class SystemGUIDriverController{
private:
	SystemGUIDriverYarpInterface* _yarpInterface;
	bool _isStartScript;
	bool _isOnScript;
	bool _isScriptRunning;
	boost::thread *_tActionLoop;
	/* Test functions*/
	void sendProposedActionLoop();
public:
	/* class methods */
	SystemGUIDriverController(SystemGUIDriverYarpInterface *yarpInterface);
   //Need to add the methods calling/being called by the YarpInterface
	void processTherapistCommand(string sCommand, double dblParameter);
	void processSelectedByTherapist(int stepID, int actionID, string arg);
};

#endif
