 /** @file deliberativeDriverController.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent deliberativeDriver
  * 
  * Main class with code, use the yarpInterface class to communicate with the other components.
  * 
  * \section lib_sec Libraries
  *
  * None
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <Emmanuel Senft>, <PLYM>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */


#ifndef DELIBERATIVEDRIVERCONTROLLER
#define DELIBERATIVEDRIVERCONTROLLER

#include <iostream>
#include <string>
#include <vector>
#include <boost/asio.hpp>
#include <boost/thread.hpp>

class DeliberativeDriverYarpInterface;
class Waiter;

class DeliberativeDriverController{
private:
	DeliberativeDriverYarpInterface* _yarpInterface;
	boost::asio::io_service *_io;
	boost::asio::deadline_timer *_t;
	int _Itime;
	boost::thread *_thr;
	bool _sendingMutualGaze;
	Waiter* _waiter;
	bool _sendPerf;
	bool _waitingInteractionEvent;

public:
	/* class methods */
	DeliberativeDriverController(DeliberativeDriverYarpInterface *yarpInterface);
	void emulateMutualGaze(const boost::system::error_code &e);
	void wait();
	void testCommand(int stepId, int actionId);
	void testCommand(int stepId, int actionId, std::string arg);
	void testCommand(int stepId, int actionId, int arg);
	void testCommand(int stepId, int actionId, int arg1, int arg2, int arg3);
	void sendToActionFeedback(int step, int actionId, bool success);
	void testSelection(int stepId, int actionId);
	void testSelection(int stepId, int actionId, int arg);
	void testSelection(int stepId, int actionId, double arg);
	void testSelection(int stepId, int actionId, std::string arg);
	void sendToPerf(float perf);
	void sendToSantrayEvent(std::string str);
	void sendToSantrayReturn(std::string str);
	void simulateExecution(int stepId, int actionId);
	void sendMutualGaze(bool gaze);
	void enableAutoGaze(bool enable);
	void receiveSuccess();
	void stop();
	void testApp();
	void setSendPerf(bool value);
	bool getSendPerf();
	void getFromInteractionEvent(int eventId, int eventParam);
  //Need to add the methods calling/being called by the YarpInterface

};

#endif
