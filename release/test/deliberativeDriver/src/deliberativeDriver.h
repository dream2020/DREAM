 /** @file deliberativeDriver.h 
  *
  * Version 1.0
  * 
  * 25/11/2016
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  * \section component_description Component Description
  *
  * Functionally, the component  does ...xyz...
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section parameters_sec Parameters
  * 
  * <b>Command-line Parameters </b> 
  * 
  * The following key-value pairs can be specified as command-line parameters 
  * by prefixing \c -- to the key e.g. \c --from file.ini. 
  * The value part can be changed to suit your needs; the default values are 
  * shown below. 
  *
  * - \c from \c deliberativeDriver.ini 
  *    - specifies the configuration file
  *
  * - \c context \c component/deliberativeDriver/configuration
  *   - specifies the sub-path from \c $DREAM_ROOT/release
  *   to the configuration file
  *
  * - \c name \c deliberativeDriver   
  *   - specifies the name of the component (used to form the stem of component port names)  
  *
  *
  * <b>Configuration File Parameters </b>
  *
  * The following key-value pairs can be specified as parameters in the configuration file 
  * (they can also be specified as command-line parameters if you so wish). 
  * The value part can be changed to suit your needs; the default values are shown below. 
  * 
  * Key | Value
  * :-- | :----  
  * _getEyeGazeIn | /deliberativeDriver/getEyeGaze:i
  * _getGripLocationIn | /deliberativeDriver/getGripLocation:i
  * _getHeadGazeIn | /deliberativeDriver/getHeadGaze:i
  * _getObjectsIn | /deliberativeDriver/getObjects:i
  * _getObjectTableDistanceIn | /deliberativeDriver/getObjectTableDistance:i
  * _getSoundDirectionIn | /deliberativeDriver/getSoundDirection:i
  * _identifyFaceIn | /deliberativeDriver/identifyFace:i
  * _identifyFaceExpressionIn | /deliberativeDriver/identifyFaceExpression:i
  * _identifyObjectIn | /deliberativeDriver/identifyObject:i
  * _identifyTrajectoryIn | /deliberativeDriver/identifyTrajectory:i
  * _trackFaceIn | /deliberativeDriver/trackFace:i
  * _trackHandIn | /deliberativeDriver/trackHand:i
  * _trackObjectIn | /deliberativeDriver/trackObject:i
  * _interactionEventIn | /deliberativeDriver/interactionEvent:i
  * _getInterventionStatusIn | /deliberativeDriver/getInterventionStatus:i
  * _attentionBiasIn | /deliberativeDriver/attentionBias:i
  * _commandSuccessIn | /deliberativeDriver/commandSuccess:i
  * _startStopIn | /deliberativeDriver/startStop:i
  * _deliberativeFeedbackIn | /deliberativeDriver/deliberativeFeedback:i
  * _sensorySummaryIn | /deliberativeDriver/sensorySummary:i
  * _sandtrayCommandIn | /deliberativeDriver/sandtrayCommand:i
  * _suggestedActionIn | /deliberativeDriver/suggestedAction:i
  *
  * - description
  *   
  * Key | Value
  * :-- | :---- 
  * _getChildBehaviourOut | /deliberativeDriver/getChildBehaviour:o    
  * _getChildPerformanceOut | /deliberativeDriver/getChildPerformance:o    
  * _checkMutualGazeOut | /deliberativeDriver/checkMutualGaze:o    
  * _getArmAngleOut | /deliberativeDriver/getArmAngle:o    
  * _getBodyOut | /deliberativeDriver/getBody:o    
  * _getBodyPoseOut | /deliberativeDriver/getBodyPose:o    
  * _getEyeGazeOut | /deliberativeDriver/getEyeGaze:o    
  * _getEyesOut | /deliberativeDriver/getEyes:o    
  * _getFacesOut | /deliberativeDriver/getFaces:o    
  * _getGripLocationOut | /deliberativeDriver/getGripLocation:o    
  * _getHandsOut | /deliberativeDriver/getHands:o    
  * _getHeadOut | /deliberativeDriver/getHead:o    
  * _getHeadGazeOut | /deliberativeDriver/getHeadGaze:o    
  * _getObjectsOut | /deliberativeDriver/getObjects:o    
  * _getObjectTableDistanceOut | /deliberativeDriver/getObjectTableDistance:o    
  * _getSoundDirectionOut | /deliberativeDriver/getSoundDirection:o    
  * _identifyFaceOut | /deliberativeDriver/identifyFace:o    
  * _identifyFaceExpressionOut | /deliberativeDriver/identifyFaceExpression:o    
  * _identifyObjectOut | /deliberativeDriver/identifyObject:o    
  * _identifyTrajectoryOut | /deliberativeDriver/identifyTrajectory:o    
  * _identifyVoiceOut | /deliberativeDriver/identifyVoice:o    
  * _recognizeSpeechOut | /deliberativeDriver/recognizeSpeech:o    
  * _trackFaceOut | /deliberativeDriver/trackFace:o    
  * _trackObjectOut | /deliberativeDriver/trackObject:o    
  * _actionFeedbackOut | /deliberativeDriver/actionFeedback:o    
  * _interventionCommandOut | /deliberativeDriver/interventionCommand:o    
  * _selectedActionOut | /deliberativeDriver/selectedAction:o    
  * _userDelibOut | /deliberativeDriver/userDelib:o    
  * _sandtrayEventOut | /deliberativeDriver/sandtrayEvent:o    
  * _sandtrayReturnOut | /deliberativeDriver/sandtrayReturn:o
  * _robotSensorsOut | /deliberativeDriver/robotSensors:o
  *
  * - description
  *
  * \section portsa_sec Ports Accessed
  * 
  * - None
  *                      
  * \section portsc_sec Ports Created
  *
  * <b>Input ports</b>
  *
  *  - \c /deliberativeDriver
  *
  *  - \c /deliberativeDriver/getEyeGaze:i
  *  - \c /deliberativeDriver/getGripLocation:i
  *  - \c /deliberativeDriver/getHeadGaze:i
  *  - \c /deliberativeDriver/getObjects:i
  *  - \c /deliberativeDriver/getObjectTableDistance:i
  *  - \c /deliberativeDriver/getSoundDirection:i
  *  - \c /deliberativeDriver/identifyFace:i
  *  - \c /deliberativeDriver/identifyFaceExpression:i
  *  - \c /deliberativeDriver/identifyObject:i
  *  - \c /deliberativeDriver/identifyTrajectory:i
  *  - \c /deliberativeDriver/trackFace:i
  *  - \c /deliberativeDriver/trackHand:i
  *  - \c /deliberativeDriver/trackObject:i
  *  - \c /deliberativeDriver/interactionEvent:i
  *  - \c /deliberativeDriver/getInterventionStatus:i
  *  - \c /deliberativeDriver/attentionBias:i
  *  - \c /deliberativeDriver/commandSuccess:i
  *  - \c /deliberativeDriver/startStop:i
  *  - \c /deliberativeDriver/deliberativeFeedback:i
  *  - \c /deliberativeDriver/sensorySummary:i
  *  - \c /deliberativeDriver/sandtrayCommand:i
  *  - \c /deliberativeDriver/suggestedAction:i
  *
  * <b>Output ports</b>
  *
  *  - \c /deliberativeDriver
  *
  *  - \c /deliberativeDriver/getChildBehaviour:o
  *  - \c /deliberativeDriver/getChildPerformance:o
  *  - \c /deliberativeDriver/checkMutualGaze:o
  *  - \c /deliberativeDriver/getArmAngle:o
  *  - \c /deliberativeDriver/getBody:o
  *  - \c /deliberativeDriver/getBodyPose:o
  *  - \c /deliberativeDriver/getEyeGaze:o
  *  - \c /deliberativeDriver/getEyes:o
  *  - \c /deliberativeDriver/getFaces:o
  *  - \c /deliberativeDriver/getGripLocation:o
  *  - \c /deliberativeDriver/getHands:o
  *  - \c /deliberativeDriver/getHead:o
  *  - \c /deliberativeDriver/getHeadGaze:o
  *  - \c /deliberativeDriver/getObjects:o
  *  - \c /deliberativeDriver/getObjectTableDistance:o
  *  - \c /deliberativeDriver/getSoundDirection:o
  *  - \c /deliberativeDriver/identifyFace:o
  *  - \c /deliberativeDriver/identifyFaceExpression:o
  *  - \c /deliberativeDriver/identifyObject:o
  *  - \c /deliberativeDriver/identifyTrajectory:o
  *  - \c /deliberativeDriver/identifyVoice:o
  *  - \c /deliberativeDriver/recognizeSpeech:o
  *  - \c /deliberativeDriver/trackFace:o
  *  - \c /deliberativeDriver/trackObject:o
  *  - \c /deliberativeDriver/actionFeedback:o
  *  - \c /deliberativeDriver/interventionCommand:o
  *  - \c /deliberativeDriver/selectedAction:o
  *  - \c /deliberativeDriver/userDelib:o
  *  - \c /deliberativeDriver/sandtrayEvent:o
  *  - \c /deliberativeDriver/sandtrayReturn:o
  *  - \c /deliberativeDriver/robotSensors:o
  *
  * <b>Port types </b>
  *
  * The functional specification only names the ports to be used to communicate with the component 
  * but doesn't say anything about the data transmitted on the ports. This is defined by the following code. 
  *
  * \c BufferedPort<VectorOf<double>>		getEyeGazeIn; 
  * \c BufferedPort<VectorOf<double>>		getGripLocationIn; 
  * \c BufferedPort<VectorOf<double>>		getHeadGazeIn; 
  * \c BufferedPort<VectorOf<double>>		getObjectsIn; 
  * \c BufferedPort<VectorOf<double>>		getObjectTableDistanceIn; 
  * \c BufferedPort<VectorOf<double>>		getSoundDirectionIn; 
  * \c BufferedPort<VectorOf<double>>		identifyFaceIn; 
  * \c BufferedPort<VectorOf<int>>		identifyFaceExpressionIn; 
  * \c BufferedPort<VectorOf<double>>		identifyObjectIn; 
  * \c BufferedPort<VectorOf<int>>			identifyTrajectoryIn; 
  * \c BufferedPort<VectorOf<double>>		trackFaceIn; 
  * \c BufferedPort<VectorOf<double>>		trackHandIn; 
  * \c BufferedPort<VectorOf<double>>		trackObjectIn; 
  * \c BufferedPort<VectorOf<int>>			interactionEventIn; 
  * \c BufferedPort<VectorOf<int>>			getInterventionStatusIn; 
  * \c BufferedPort<Bottle>					attentionBiasIn; 
  * \c BufferedPort<VectorOf<int>>			commandSuccessIn; 
  * \c BufferedPort<VectorOf<int>>			startStopIn; 
  * \c BufferedPort<Bottle>					deliberativeFeedbackIn; 
  * \c BufferedPort<Bottle>					sensorySummaryIn; 
  * \c BufferedPort<Bottle>					sandtrayCommandIn; 
  * \c BufferedPort<Bottle>					suggestedActionIn; 
  * \c BufferedPort<VectorOf<double>>		getChildBehaviourOut; 
  * \c BufferedPort<VectorOf<double>>		getChildPerformanceOut; 
  * \c BufferedPort<VectorOf<int>>			checkMutualGazeOut; 
  * \c BufferedPort<VectorOf<double>>		getArmAngleOut; 
  * \c BufferedPort<VectorOf<double>>		getBodyOut; 
  * \c BufferedPort<VectorOf<double>>		getBodyPoseOut; 
  * \c BufferedPort<VectorOf<double>>		getEyeGazeOut; 
  * \c BufferedPort<VectorOf<double>>		getEyesOut; 
  * \c BufferedPort<VectorOf<double>>		getFacesOut; 
  * \c BufferedPort<VectorOf<double>>		getGripLocationOut; 
  * \c BufferedPort<VectorOf<double>>		getHandsOut; 
  * \c BufferedPort<VectorOf<double>>		getHeadOut; 
  * \c BufferedPort<VectorOf<double>>		getHeadGazeOut; 
  * \c BufferedPort<VectorOf<double>>		getObjectsOut; 
  * \c BufferedPort<VectorOf<double>>		getObjectTableDistanceOut; 
  * \c BufferedPort<VectorOf<double>>		getSoundDirectionOut; 
  * \c BufferedPort<VectorOf<double>>		identifyFaceOut; 
  * \c BufferedPort<VectorOf<int>>		identifyFaceExpressionOut; 
  * \c BufferedPort<VectorOf<double>>		identifyObjectOut; 
  * \c BufferedPort<VectorOf<double>>		identifyTrajectoryOut; 
  * \c BufferedPort<VectorOf<int>>		identifyVoiceOut; 
  * \c BufferedPort<Bottle>		recognizeSpeechOut; 
  * \c BufferedPort<VectorOf<double>>		trackFaceOut; 
  * \c BufferedPort<VectorOf<double>>		trackObjectOut; 
  * \c BufferedPort<Bottle>		actionFeedbackOut; 
  * \c BufferedPort<Bottle>		interventionCommandOut; 
  * \c BufferedPort<Bottle>		selectedActionOut; 
  * \c BufferedPort<Bottle>		userDelibOut; 
  * \c BufferedPort<Bottle>		sandtrayEventOut; 
  * \c BufferedPort<Bottle>		sandtrayReturnOut;
  * \c BufferedPort<Bottle>		robotSensorsOut;
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \section conf_file_sec Configuration Files
  *
  * \c deliberativeDriver.ini   
  *
  * \section example_sec Example Instantiation of the Component
  * 
  * <tt>deliberativeDriver --name deliberativeDriver --context deliberativeDriver/config --from deliberativeDriver.ini </tt>
  *
  * \author 
  * 
  * <Emmanuel Senft>, <PLYM>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */
  
/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Emmanuel Senft, PLYM 
 * Email:   emmanuel.senft@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */

  
 /* 
  * Audit Trail
  * -----------
  * 25/11/2016 Version 1.0: ... (Emmanuel Senft)
  */ 
 
#ifndef DELIBERATIVEDRIVER
#define DELIBERATIVEDRIVER

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class DeliberativeDriverYarpInterface;
class DeliberativeDriverController;

class GetEyeGazeInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getEyeGazeInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class GetGripLocationInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getGripLocationInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class GetHeadGazeInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getHeadGazeInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class GetObjectsInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getObjectsInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class GetObjectTableDistanceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getObjectTableDistanceInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class GetSoundDirectionInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getSoundDirectionInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class IdentifyFaceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& identifyFaceInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class IdentifyFaceExpressionInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& identifyFaceExpressionInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class IdentifyObjectInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& identifyObjectInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class IdentifyTrajectoryInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& identifyTrajectoryInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class TrackFaceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& trackFaceInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class TrackHandInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& trackHandInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class TrackObjectInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& trackObjectInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class InteractionEventInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& interactionEventInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class GetInterventionStatusInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& getInterventionStatusInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class AttentionBiasInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& attentionBiasInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class CommandSuccessInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& commandSuccessInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class StartStopInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& startStopInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class DeliberativeFeedbackInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& deliberativeFeedbackInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class SensorySummaryInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& sensorySummaryInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class SandtrayCommandInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& sandtrayCommandInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};

class SuggestedActionInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& suggestedActionInData);
   DeliberativeDriverYarpInterface *_deliberativeDriverYarpInterface;
public:
   void setDeliberativeDriver(DeliberativeDriverYarpInterface* yarpInterface);
};


class DeliberativeDriverThread : public yarp::os::Thread{
private:
	/* class variables */
	yarp::os::BufferedPort<VectorOf<double>>* _getEyeGazeIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getGripLocationIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getHeadGazeIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getObjectsIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getObjectTableDistanceIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getSoundDirectionIn;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyFaceIn;
	yarp::os::BufferedPort<VectorOf<int>>* _identifyFaceExpressionIn;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyObjectIn;
	yarp::os::BufferedPort<VectorOf<int>>* _identifyTrajectoryIn;
	yarp::os::BufferedPort<VectorOf<double>>* _trackFaceIn;
	yarp::os::BufferedPort<VectorOf<double>>* _trackHandIn;
	yarp::os::BufferedPort<VectorOf<double>>* _trackObjectIn;
	yarp::os::BufferedPort<VectorOf<int>>* _interactionEventIn;
	yarp::os::BufferedPort<VectorOf<int>>* _getInterventionStatusIn;
	yarp::os::BufferedPort<Bottle>* _attentionBiasIn;
	yarp::os::BufferedPort<VectorOf<int>>* _commandSuccessIn;
	yarp::os::BufferedPort<VectorOf<int>>* _startStopIn;
	yarp::os::BufferedPort<Bottle>* _deliberativeFeedbackIn;
	yarp::os::BufferedPort<Bottle>* _sensorySummaryIn;
	yarp::os::BufferedPort<Bottle>* _sandtrayCommandIn;
	yarp::os::BufferedPort<Bottle>* _suggestedActionIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getChildBehaviourOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getChildPerformanceOut;
	yarp::os::BufferedPort<VectorOf<int>>* _checkMutualGazeOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getArmAngleOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getBodyOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getBodyPoseOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getEyeGazeOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getEyesOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getFacesOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getGripLocationOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getHandsOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getHeadOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getHeadGazeOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getObjectsOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getObjectTableDistanceOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getSoundDirectionOut;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyFaceOut;
	yarp::os::BufferedPort<VectorOf<int>>* _identifyFaceExpressionOut;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyObjectOut;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyTrajectoryOut;
	yarp::os::BufferedPort<VectorOf<int>>* _identifyVoiceOut;
	yarp::os::BufferedPort<Bottle>* _recognizeSpeechOut;
	yarp::os::BufferedPort<VectorOf<double>>* _trackFaceOut;
	yarp::os::BufferedPort<VectorOf<double>>* _trackObjectOut;
	yarp::os::BufferedPort<Bottle>* _actionFeedbackOut;
	yarp::os::BufferedPort<Bottle>* _interventionCommandOut;
	yarp::os::BufferedPort<Bottle>* _selectedActionOut;
	yarp::os::BufferedPort<Bottle>* _userDelibOut;
	yarp::os::BufferedPort<Bottle>* _sandtrayEventOut;
	yarp::os::BufferedPort<Bottle>* _sandtrayReturnOut;
	yarp::os::BufferedPort<Bottle>* _robotSensorsOut;
	DeliberativeDriverYarpInterface* _yarpInterface;
	GetEyeGazeInAnalyser *_getEyeGazeInAnalyser;
	GetGripLocationInAnalyser *_getGripLocationInAnalyser;
	GetHeadGazeInAnalyser *_getHeadGazeInAnalyser;
	GetObjectsInAnalyser *_getObjectsInAnalyser;
	GetObjectTableDistanceInAnalyser *_getObjectTableDistanceInAnalyser;
	GetSoundDirectionInAnalyser *_getSoundDirectionInAnalyser;
	IdentifyFaceInAnalyser *_identifyFaceInAnalyser;
	IdentifyFaceExpressionInAnalyser *_identifyFaceExpressionInAnalyser;
	IdentifyObjectInAnalyser *_identifyObjectInAnalyser;
	IdentifyTrajectoryInAnalyser *_identifyTrajectoryInAnalyser;
	TrackFaceInAnalyser *_trackFaceInAnalyser;
	TrackHandInAnalyser *_trackHandInAnalyser;
	TrackObjectInAnalyser *_trackObjectInAnalyser;
	InteractionEventInAnalyser *_interactionEventInAnalyser;
	GetInterventionStatusInAnalyser *_getInterventionStatusInAnalyser;
	AttentionBiasInAnalyser *_attentionBiasInAnalyser;
	CommandSuccessInAnalyser *_commandSuccessInAnalyser;
	StartStopInAnalyser *_startStopInAnalyser;
	DeliberativeFeedbackInAnalyser *_deliberativeFeedbackInAnalyser;
	SensorySummaryInAnalyser *_sensorySummaryInAnalyser;
	SandtrayCommandInAnalyser *_sandtrayCommandInAnalyser;
	SuggestedActionInAnalyser *_suggestedActionInAnalyser;
	
public:
	/* class methods */
	DeliberativeDriverThread(BufferedPort<VectorOf<double>>* getEyeGazeIn, BufferedPort<VectorOf<double>>* getGripLocationIn, BufferedPort<VectorOf<double>>* getHeadGazeIn, BufferedPort<VectorOf<double>>* getObjectsIn, BufferedPort<VectorOf<double>>* getObjectTableDistanceIn, BufferedPort<VectorOf<double>>* getSoundDirectionIn, BufferedPort<VectorOf<double>>* identifyFaceIn, BufferedPort<VectorOf<int>>* identifyFaceExpressionIn, BufferedPort<VectorOf<double>>* identifyObjectIn, BufferedPort<VectorOf<int>>* identifyTrajectoryIn, BufferedPort<VectorOf<double>>* trackFaceIn, BufferedPort<VectorOf<double>>* trackHandIn, BufferedPort<VectorOf<double>>* trackObjectIn, BufferedPort<VectorOf<int>>* interactionEventIn, BufferedPort<VectorOf<int>>* getInterventionStatusIn, BufferedPort<Bottle>* attentionBiasIn, BufferedPort<VectorOf<int>>* commandSuccessIn, BufferedPort<VectorOf<int>>* startStopIn, BufferedPort<Bottle>* deliberativeFeedbackIn, BufferedPort<Bottle>* sensorySummaryIn, BufferedPort<Bottle>* sandtrayCommandIn, BufferedPort<Bottle>* suggestedActionIn, BufferedPort<VectorOf<double>>* getChildBehaviourOut, BufferedPort<VectorOf<double>>* getChildPerformanceOut, BufferedPort<VectorOf<int>>* checkMutualGazeOut, BufferedPort<VectorOf<double>>* getArmAngleOut, BufferedPort<VectorOf<double>>* getBodyOut, BufferedPort<VectorOf<double>>* getBodyPoseOut, BufferedPort<VectorOf<double>>* getEyeGazeOut, BufferedPort<VectorOf<double>>* getEyesOut, BufferedPort<VectorOf<double>>* getFacesOut, BufferedPort<VectorOf<double>>* getGripLocationOut, BufferedPort<VectorOf<double>>* getHandsOut, BufferedPort<VectorOf<double>>* getHeadOut, BufferedPort<VectorOf<double>>* getHeadGazeOut, BufferedPort<VectorOf<double>>* getObjectsOut, BufferedPort<VectorOf<double>>* getObjectTableDistanceOut, BufferedPort<VectorOf<double>>* getSoundDirectionOut, BufferedPort<VectorOf<double>>* identifyFaceOut, BufferedPort<VectorOf<int>>* identifyFaceExpressionOut, BufferedPort<VectorOf<double>>* identifyObjectOut, BufferedPort<VectorOf<double>>* identifyTrajectoryOut, BufferedPort<VectorOf<int>>* identifyVoiceOut, BufferedPort<Bottle>* recognizeSpeechOut, BufferedPort<VectorOf<double>>* trackFaceOut, BufferedPort<VectorOf<double>>* trackObjectOut, BufferedPort<Bottle>* actionFeedbackOut, BufferedPort<Bottle>* interventionCommandOut, BufferedPort<Bottle>* selectedActionOut, BufferedPort<Bottle>* userDelibOut, BufferedPort<Bottle>* sandtrayEventOut, BufferedPort<Bottle>* sandtrayReturnOut, BufferedPort<Bottle>* robotSensorsOut);
    void setYarpInterface(DeliberativeDriverYarpInterface* yarpInterface);
	bool threadInit();
	void threadRelease();
	void sendToGetChildBehaviour(VectorOf<double> data);
	void sendToGetChildPerformance(VectorOf<double> data);
	void sendToCheckMutualGaze(VectorOf<int> data);
	void sendToGetArmAngle(VectorOf<double> data);
	void sendToGetBody(VectorOf<double> data);
	void sendToGetBodyPose(VectorOf<double> data);
	void sendToGetEyeGaze(VectorOf<double> data);
	void sendToGetEyes(VectorOf<double> data);
	void sendToGetFaces(VectorOf<double> data);
	void sendToGetGripLocation(VectorOf<double> data);
	void sendToGetHands(VectorOf<double> data);
	void sendToGetHead(VectorOf<double> data);
	void sendToGetHeadGaze(VectorOf<double> data);
	void sendToGetObjects(VectorOf<double> data);
	void sendToGetObjectTableDistance(VectorOf<double> data);
	void sendToGetSoundDirection(VectorOf<double> data);
	void sendToIdentifyFace(VectorOf<double> data);
	void sendToIdentifyFaceExpression(VectorOf<int> data);
	void sendToIdentifyObject(VectorOf<double> data);
	void sendToIdentifyTrajectory(VectorOf<double> data);
	void sendToIdentifyVoice(VectorOf<int> data);
	void sendToRecognizeSpeech(Bottle data);
	void sendToTrackFace(VectorOf<double> data);
	void sendToTrackObject(VectorOf<double> data);
	void sendToActionFeedback(Bottle data);
	void sendToInterventionCommand(Bottle data);
	void sendToSelectedAction(Bottle data);
	void sendToUserDelib(Bottle data);
	void sendToSandtrayEvent(Bottle data);
	void sendToSandtrayReturn(Bottle data);
	void sendToRobotSensors(Bottle data);
	void run();
};

class DeliberativeDriver : public yarp::os::RFModule{
private:
	/* module parameters */
	std::string _moduleName;
	std::string _getEyeGazeInName;
	std::string _getGripLocationInName;
	std::string _getHeadGazeInName;
	std::string _getObjectsInName;
	std::string _getObjectTableDistanceInName;
	std::string _getSoundDirectionInName;
	std::string _identifyFaceInName;
	std::string _identifyFaceExpressionInName;
	std::string _identifyObjectInName;
	std::string _identifyTrajectoryInName;
	std::string _trackFaceInName;
	std::string _trackHandInName;
	std::string _trackObjectInName;
	std::string _interactionEventInName;
	std::string _getInterventionStatusInName;
	std::string _attentionBiasInName;
	std::string _commandSuccessInName;
	std::string _startStopInName;
	std::string _deliberativeFeedbackInName;
	std::string _sensorySummaryInName;
	std::string _sandtrayCommandInName;
	std::string _suggestedActionInName;
	std::string _getChildBehaviourOutName;
	std::string _getChildPerformanceOutName;
	std::string _checkMutualGazeOutName;
	std::string _getArmAngleOutName;
	std::string _getBodyOutName;
	std::string _getBodyPoseOutName;
	std::string _getEyeGazeOutName;
	std::string _getEyesOutName;
	std::string _getFacesOutName;
	std::string _getGripLocationOutName;
	std::string _getHandsOutName;
	std::string _getHeadOutName;
	std::string _getHeadGazeOutName;
	std::string _getObjectsOutName;
	std::string _getObjectTableDistanceOutName;
	std::string _getSoundDirectionOutName;
	std::string _identifyFaceOutName;
	std::string _identifyFaceExpressionOutName;
	std::string _identifyObjectOutName;
	std::string _identifyTrajectoryOutName;
	std::string _identifyVoiceOutName;
	std::string _recognizeSpeechOutName;
	std::string _trackFaceOutName;
	std::string _trackObjectOutName;
	std::string _actionFeedbackOutName;
	std::string _interventionCommandOutName;
	std::string _selectedActionOutName;
	std::string _userDelibOutName;
	std::string _sandtrayEventOutName;
	std::string _sandtrayReturnOutName;
	std::string _robotSensorsOutName;
	std::string _handlerPortName;

	/* class variables */
	yarp::os::BufferedPort<VectorOf<double>> _getEyeGazeIn;
	yarp::os::BufferedPort<VectorOf<double>> _getGripLocationIn;
	yarp::os::BufferedPort<VectorOf<double>> _getHeadGazeIn;
	yarp::os::BufferedPort<VectorOf<double>> _getObjectsIn;
	yarp::os::BufferedPort<VectorOf<double>> _getObjectTableDistanceIn;
	yarp::os::BufferedPort<VectorOf<double>> _getSoundDirectionIn;
	yarp::os::BufferedPort<VectorOf<double>> _identifyFaceIn;
	yarp::os::BufferedPort<VectorOf<int>> _identifyFaceExpressionIn;
	yarp::os::BufferedPort<VectorOf<double>> _identifyObjectIn;
	yarp::os::BufferedPort<VectorOf<int>> _identifyTrajectoryIn;
	yarp::os::BufferedPort<VectorOf<double>> _trackFaceIn;
	yarp::os::BufferedPort<VectorOf<double>> _trackHandIn;
	yarp::os::BufferedPort<VectorOf<double>> _trackObjectIn;
	yarp::os::BufferedPort<VectorOf<int>> _interactionEventIn;
	yarp::os::BufferedPort<VectorOf<int>> _getInterventionStatusIn;
	yarp::os::BufferedPort<Bottle> _attentionBiasIn;
	yarp::os::BufferedPort<VectorOf<int>> _commandSuccessIn;
	yarp::os::BufferedPort<VectorOf<int>> _startStopIn;
	yarp::os::BufferedPort<Bottle> _deliberativeFeedbackIn;
	yarp::os::BufferedPort<Bottle> _sensorySummaryIn;
	yarp::os::BufferedPort<Bottle> _sandtrayCommandIn;
	yarp::os::BufferedPort<Bottle> _suggestedActionIn;
	yarp::os::BufferedPort<VectorOf<double>> _getChildBehaviourOut;
	yarp::os::BufferedPort<VectorOf<double>> _getChildPerformanceOut;
	yarp::os::BufferedPort<VectorOf<int>> _checkMutualGazeOut;
	yarp::os::BufferedPort<VectorOf<double>> _getArmAngleOut;
	yarp::os::BufferedPort<VectorOf<double>> _getBodyOut;
	yarp::os::BufferedPort<VectorOf<double>> _getBodyPoseOut;
	yarp::os::BufferedPort<VectorOf<double>> _getEyeGazeOut;
	yarp::os::BufferedPort<VectorOf<double>> _getEyesOut;
	yarp::os::BufferedPort<VectorOf<double>> _getFacesOut;
	yarp::os::BufferedPort<VectorOf<double>> _getGripLocationOut;
	yarp::os::BufferedPort<VectorOf<double>> _getHandsOut;
	yarp::os::BufferedPort<VectorOf<double>> _getHeadOut;
	yarp::os::BufferedPort<VectorOf<double>> _getHeadGazeOut;
	yarp::os::BufferedPort<VectorOf<double>> _getObjectsOut;
	yarp::os::BufferedPort<VectorOf<double>> _getObjectTableDistanceOut;
	yarp::os::BufferedPort<VectorOf<double>> _getSoundDirectionOut;
	yarp::os::BufferedPort<VectorOf<double>> _identifyFaceOut;
	yarp::os::BufferedPort<VectorOf<int>> _identifyFaceExpressionOut;
	yarp::os::BufferedPort<VectorOf<double>> _identifyObjectOut;
	yarp::os::BufferedPort<VectorOf<double>> _identifyTrajectoryOut;
	yarp::os::BufferedPort<VectorOf<int>> _identifyVoiceOut;
	yarp::os::BufferedPort<Bottle> _recognizeSpeechOut;
	yarp::os::BufferedPort<VectorOf<double>> _trackFaceOut;
	yarp::os::BufferedPort<VectorOf<double>> _trackObjectOut;
	yarp::os::BufferedPort<Bottle> _actionFeedbackOut;
	yarp::os::BufferedPort<Bottle> _interventionCommandOut;
	yarp::os::BufferedPort<Bottle> _selectedActionOut;
	yarp::os::BufferedPort<Bottle> _userDelibOut;
	yarp::os::BufferedPort<Bottle> _sandtrayEventOut;
	yarp::os::BufferedPort<Bottle> _sandtrayReturnOut;
	yarp::os::BufferedPort<Bottle> _robotSensorsOut;
	yarp::os::Port _handlerPort;

	/* pointer to a new thread */
	DeliberativeDriverThread* _deliberativeDriverThread;
   DeliberativeDriverController* _deliberativeDriverController;
   DeliberativeDriverYarpInterface* _deliberativeDriverYarpInterface;
public:
	/* class methods */
	bool configure(yarp::os::ResourceFinder &rf);
	bool interruptModule();
	bool close();
	bool respond(const yarp::os::Bottle& command, Bottle& reply);
	double getPeriod();
	bool updateModule();
};

#endif
