/** @file actionMessages.h
*
* Version 1.0
*
* Generated by YarpGenerator, Emmanuel Senft, PLYM
*
*
* \defgroup DREAM_cognitiveComponent sharedResources
*
* Header class to share sandtray messages between components
*
* \section lib_sec Libraries
*
* None
*
* \section in_files_sec Input Data Files
*
* None
*
* \section out_data_sec Output Data Files
*
* None
*
* \author
*
* <Emmanuel Senft>, <Plymouth University>
*
* Copyright (C) 2014 DREAM Consortium
*
*/

/*
* Copyright (C) 2014 DREAM Consortium
* FP7 Project 611391 co-funded by the European Commission
*
* Author:  Emmanuel Senft, Plymouth University
* Email:   emmanuel.senft@plymouth.ac.uk
* Website: www.dream2020.eu
*
* This program comes with ABSOLUTELY NO WARRANTY
*/

/*
* Audit Trail
* -----------
* 27/06/2016 Version 1.0: ... (Emmanuel Senft)
*/

#ifndef ACTIONMESSAGES
#define ACTIONMESSAGES

#include <string>

/* ------------------------------- */
/*        		ARM ID	           */
/* ------------------------------- */
const bool _LEFT_ARM_ = 0;
const bool _RIGHT_ARM_ = 1;


// Message structure: int stepId, int actionId, arguments...
/* ------------------------------- */
/*        ACTION COMMANDS          */
/* ------------------------------- */
const int _ACTION_GO_NEXT_STEP_ = 0;							// expects 0 argument
const int _ACTION_SAY_ = 2;										// expects 1 argument string	
const int _ACTION_MOVE_ = 3;									// expects 1 argument int
const int _ACTION_GRAB_OBJECT_ = 4;								// expects 0 argument
const int _ACTION_DROP_OBJECT_ = 5;								// expects 0 argument
const int _ACTION_FEEDBACK_IMITATION_OBJECT_GOOD_ = 6;			// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_IMITATION_OBJECT_BAD_ = 7;			// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_IMITATION_MOVE_GOOD_ = 10;			// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_IMITATION_MOVE_BAD_ = 11;			// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_TT_WAITING_GOOD_ = 14;				// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_TT_WAITING_BAD_ = 15;				// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_LAST_TT_WAITING_BAD_ = 99;			// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_TT_SORTING_GOOD_ = 16;				// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_TT_SORTING_BAD_ = 17;				// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_TT_CHOOSING_GOOD_ = 18;				// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_TT_CHOOSING_BAD_ = 19;				// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_TT_PATTERN_GOOD_ = 20;				// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_TT_PATTERN_BAD_ = 21;				// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_BAD_NO_ACTION_ = 98;				    // expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_JA_GOOD_ = 22;						// expects 1 argument - bool 0 if disabled
const int _ACTION_FEEDBACK_JA_BAD_ = 23;						// expects 1 argument - bool 0 if disabled
const int _ACTION_ROBOT_GOOD_MOVE_ = 24;						// expects 0 argument - enable Sandtry if Therapist only
const int _ACTION_POINT_IMAGE_ = 25;							// expects 1 argument int id - enable Sandtry if Therapist only
const int _ACTION_LOOK_POINT_SAY_ = 26;							// expects 1 argument int imageId (0 left/1 right)
const int _ACTION_LOOK_POINT_ = 27;								// expects 1 argument int imageId (0 left/1 right)
const int _ACTION_LOOK_ = 28;									// expects 1 argument int imageId (0 left/1 right)
const int _ACTION_MOVE_HEAD_ = 29;								// expects 4 arguments float x, y, z, speed
const int _ACTION_MOVE_HAND_ = 30;								// expects 5 arguments bool rightArm float x, y, z, roll
const int _ACTION_ENABLE_ = 31;
const int _ACTION_DISABLE_ = 32;
const int _ACTION_LOOK_AT_ = 33;								
const int _ACTION_WAITING_FOR_PERF_ = 36;
const int _ACTION_WAITING_FOR_GAZE_ = 37;
const int _ACTION_POINT_AT_ = 38;								// expects 4*n (+1/2 args) (should not be used as such - subaction of robot good move)
const int _ACTION_CLOSE_HAND_ = 39;								// expects 1 argument bool rightArm
const int _ACTION_OPEN_HAND_ = 40;								// expects 1 argument bool rightArm
const int _ACTION_STAND_ = 41;									// expects 0
const int _ACTION_REQUEST_GAZE_ = 42;							// expects 0

const int _ACTION_FINISHED_ = 100;								// expects nothing, we are done
const int _ACTION_NO_ACTION_ = 101;								// expects nothing, no proposed action
const int _ACTION_GO_OFF_SCRIPT_ = 102;							// expects nothing, no proposed action
const int _ACTION_BACK_ON_SCRIPT_ = 103;						// expects nothing, no proposed action
const int _ACTION_CANCEL_SUGGESTION_ = 104;						// expects nothing, no proposed action

// Sandtray action - only from GUI
const int _ACTION_SANDTRAY_LOAD_LIBRARY_ = 105;					// expects 1 argument int, library to load
const int _ACTION_SANDTRAY_ENABLE_FEEDBACK_ = 106;				// expects 1 argument bool
const int _ACTION_SANDTRAY_ENABLE_TOUCH_ = 107;					// expects 1 argument bool
const int _ACTION_SANDTRAY_ONE_BY_ONE_ = 108;					// expects 1 argument bool

/* ------------------------------------- */
/*        ZERO DELAY ACTIONS             */
/* ------------------------------------- */
const int _ZERO_DELAY_ACTIONS_[] = {_ACTION_NO_ACTION_,_ACTION_STAND_};
const int _ZERO_DELAY_MOVE_ACTIONS_[] = {0,1,2,3,4,5,6,7,8,9,10,11,16};

/* ------------------------------------- */
/*        GAZE REQUEST STRING            */
/* ------------------------------------- */
const std::string _STRING_GAZE_REQUEST_ = "Uităte la mine! Hai să ne jucăm împreună!";

/* ------------------------------------- */
/*        ACTION FROM ATTENTION          */
/* ------------------------------------- */
const int _ACTION_FACIAL_EXPRESSION_ = 200;	
const int _ACTION_SOCIAL_REACTION_ = 201;	
const int _ACTION_SOCIAL_REACTION_SPEECH_ = 202;	

/* ------------------------------- */
/*        	THERAPISTCOMMAND	       */
/* ------------------------------- */
const std::string _ACTION_CREATE_ = "Create Session";				// used by GUI -> SMS therapist command
const std::string _ACTION_SCRIPTLOAD_ = "scriptload";
const std::string _ACTION_STOPSCRIPT_ = "stopscript";
const std::string _ACTION_REACTION_ = "Reaction Subsystem";
const std::string _ACTION_ATTENTION_ = "Attention Subsystem";
const std::string _ACTION_COUNTDOWN_ = "countdown";
const std::string _ACTION_STEPMOD_ = "stepmod";
const std::string _ACTION_SCRIPTFINISHED_ = "scriptfinished";
const int _ACTION_REPEAT_ = 500;
const int _ACTION_PREVIOUS_ = 501;
const int _ACTION_NEXT_ = 502;

/* ------------------------------- */
/*        		OTHER  	       */
/* ------------------------------- */
const int _ACTION_RECEIVED_GAZE_ = 300;							// expects 1 argument bool
const int _ACTION_RECEIVED_PERF_ = 301;							// expects 1 argument float
const int _ACTION_ROBOT_CONNECTED_ = 302;						// expects 1 argument bool (0 not connected, 1 connected)
const int _ACTION_SANDTRAY_TYPE_ = 303;							// expects 1 argument int (0 _SANDTRAY_NOT_CONNECTED_, 1 _SANDTRAY_CATEGORY_, 2 _SANDTRAY_PATTERN_)
const int _ACTION_CURRENT_STEP_ = 304;							// expects 1 argument int
const int _ACTION_CHANGE_STEP_ = 305;							// expects 1 argument int new step
const int _ACTION_SCRIPT_TYPE_ = 400;							// expects 2 argument bools: therapist - diagnose
const int _ACTION_ERROR_ = 900;									// expects 1 argument string, error message
const int _ACTION_EMERGENCY_EXIT_ = 901;						// expects nothing, hope it can defreeze the system
const int _ACTION_CORRUPTED_ = 911;								// expects nothing, we are doomed


#endif