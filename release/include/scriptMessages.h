/** @file scriptMessages.h
*
* Version 1.0
*
* Generated by YarpGenerator, Emmanuel Senft, PLYM
*
*
* \defgroup DREAM_cognitiveComponent sharedResources
*
* Header class to share sandtray messages between components
*
* \section lib_sec Libraries
*
* None
*
* \section in_files_sec Input Data Files
*
* None
*
* \section out_data_sec Output Data Files
*
* None
*
* \author
*
* <James Kennedy>, <Plymouth University>
*
* Copyright (C) 2014 DREAM Consortium
*
*/

/*
* Copyright (C) 2014 DREAM Consortium
* FP7 Project 611391 co-funded by the European Commission
*
* Author:  James Kennedy, Plymouth University
* Email:   james.kennedy@plymouth.ac.uk
* Website: www.dream2020.eu
*
* This program comes with ABSOLUTELY NO WARRANTY
*/

/*
* Audit Trail
* -----------
* 27/06/2016 Version 1.0: ... (James Kennedy)
* 09/08/2016 Version 1.1: populated (Emmanuel Senft)
*/

// script messages format: (int, int, arg1 - variable type int|string, arg2 - int) = (script_stepn_umber, delib_command_id, arg1, arg2)

#ifndef SCRIPTMESSAGES
#define SCRIPTMESSAGES

#include <string>

/* ------------------------------- */
/*        SCRIPT COMMANDS        */
/* ------------------------------- */
const int _SCRIPT_ID_ = 0;											// expects 1 argument int script Id
const int _SCRIPT_CHECK_GAZE_ = 1;									// expects 0 argument
const int _SCRIPT_SAY_ = 2;											// expects 1 argument string	
const int _SCRIPT_MOVE_ = 3;										// expects 1 argument string
const int _SCRIPT_WAIT_ = 4;										// expects 1 argument int milliseconds
const int _SCRIPT_WAIT_FOR_PERF_ = 5;								// expects 4 arguments 4 int id, parameter, time and waitingType (0 = blocking, 1 = non-blocking, 2 = blocking without sending)
const int _SCRIPT_GRAB_OBJECT_ = 6;									// expects 0 argument
const int _SCRIPT_DROP_OBJECT_ = 7;									// expects 0 argument
const int _SCRIPT_FEEDBACK_IMITATION_OBJECT_ = 8;					// expects 0 argument
const int _SCRIPT_LAST_FEEDBACK_IMITATION_OBJECT_ = 9;				// expects 0 argument
const int _SCRIPT_FEEDBACK_IMITATION_MOVE_ = 10;					// expects 0 argument
const int _SCRIPT_LAST_FEEDBACK_IMITATION_MOVE_ = 11;				// expects 0 argument
const int _SCRIPT_FEEDBACK_TT_WAITING_ = 12;						// expects 0 argument
const int _SCRIPT_LAST_FEEDBACK_TT_WAITING_ = 112;						// expects 0 argument
const int _SCRIPT_FEEDBACK_TT_SORTING_ = 13;						// expects 0 argument
const int _SCRIPT_LAST_FEEDBACK_TT_SORTING_ = 113;						// expects 0 argument
const int _SCRIPT_FEEDBACK_TT_CHOOSING_ = 14;						// expects 0 argument
const int _SCRIPT_LAST_FEEDBACK_TT_CHOOSING_ = 114;						// expects 0 argument
const int _SCRIPT_FEEDBACK_TT_PATTERN_ = 15;						// expects 0 argument
const int _SCRIPT_LAST_FEEDBACK_TT_PATTERN_ = 115;						// expects 0 argument
const int _SCRIPT_FEEDBACK_JA_ = 16;								// expects 0 argument
const int _SCRIPT_LAST_FEEDBACK_JA_ = 111;							// expects 0 argument TO CHANGE
const int _SCRIPT_SANDTRAY_DISPLAY_WHITE_ = 17;						// expects 0 argument
const int _SCRIPT_SANDTRAY_LOAD_LIBRARY_ = 18;						// expects 1 argument int
const int _SCRIPT_SANDTRAY_SET_IMAGE_ONE_ = 19;						// expects 0 argument
const int _SCRIPT_SANDTRAY_SET_IMAGE_ALL_ = 20;						// expects 0 argument
const int _SCRIPT_SANDTRAY_ENABLE_FEEDBACK_ = 21;					// expects 0 argument
const int _SCRIPT_SANDTRAY_DISABLE_FEEDBACK_ = 22;					// expects 0 argument
const int _SCRIPT_SANDTRAY_ENABLE_TOUCH_ = 23;						// expects 0 argument
const int _SCRIPT_SANDTRAY_DISABLE_TOUCH_ = 24;						// expects 0 argument
const int _SCRIPT_ROBOT_GOOD_MOVE_ = 25;							// expects 0 argument
const int _SCRIPT_POINT_IMAGE_ = 26;								// expects 1 argument int id
const int _SCRIPT_LOOK_POINT_SAY_ = 27;								// expects 1 argument int id (0 left/1 right)
const int _SCRIPT_LOOK_POINT_ = 28;									// expects 1 argument int id (0 left/1 right)
const int _SCRIPT_LOOK_ = 29;										// expects 1 argument int id (0 left/1 right)
const int _SCRIPT_SANDTRAY_NEW_GAME_ = 30;							// expects 0 argument
const int _SCRIPT_ENABLE_ROBOT_ = 31;								// expects 0 argument
const int _SCRIPT_DISABLE_ROBOT_ = 32;								// expects 0 argument
const int _SCRIPT_STAND_ = 33;										// expects 0 argument
const int _SCRIPT_SAY_IF_GOOD_PERF_ = 34;							// expects 1 argument string to say
const int _SCRIPT_FINISHED_ = 100;									// expects nothing, we are done
const int _SCRIPT_TYPE_ = 101;										// expects 1 argument int script type id
const int _SCRIPT_CORRUPTED_ = 911;									// expects nothing, we are ****ed

/* ------------------------------- */
/*        SCRIPT TYPES             */
/* ------------------------------- */
const int _TURN_TAKING_ = 0;										// category game
const int _IMITATION_ = 1;											// no game
const int _JOINT_ATTENTION_ = 2;									// category game
const int _PATTERN_ = 3;											// pattern game
const int _SHARING_INFO_ = 4;										// category game

/* ------------------------------- */
/*        PERF WAITING TYPES       */
/* ------------------------------- */
const int _WAITING_PERF_STANDARD_ = 0;										// category game
const int _WAITING_PERF_REQUEST_ = 1;											// no game
const int _WAITING_PERF_BLOCKING_ = 2;
#endif