 /** @file deliberativeSubsystem.h Interface file for deliberativeSubsystem Component
  *
  * Version 1.0
  * 
  * 21/02/2017
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  * \section component_description Component Description
  *
  * Functionally, the component converts script steps from the scriptManager into high level actions 
  * which are proposed to the GUI through the SMS or directly executed when waiting or interacting with the sandtray.
  * It communicates with components from WP3 to know when the child is looking at the robot and WP5 to request a performance evaluation
  * which is used to decide which action to do next.
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  * - Boost.
  *
  * \section parameters_sec Parameters
  * 
  * <b>Command-line Parameters </b> 
  * 
  * The following key-value pairs can be specified as command-line parameters 
  * by prefixing \c -- to the key e.g. \c --from file.ini. 
  * The value part can be changed to suit your needs; the default values are 
  * shown below. 
  *
  * - \c from \c deliberativeSubsystem.ini 
  *    - specifies the configuration file
  *
  * - \c context \c component/deliberativeSubsystem/configuration
  *   - specifies the sub-path from \c $DREAM_ROOT/release
  *   to the configuration file
  *
  * - \c name \c deliberativeSubsystem   
  *   - specifies the name of the component (used to form the stem of component port names)  
  *
  *
  * <b>Configuration File Parameters </b>
  *
  * The following key-value pairs can be specified as parameters in the configuration file 
  * (they can also be specified as command-line parameters if you so wish). 
  * The value part can be changed to suit your needs; the default values are shown below. 
  * 
  * Key | Value
  * :-- | :----  
  * _getChildBehaviourIn | /deliberativeSubsystem/getChildBehaviour:i
  * _getChildPerformanceIn | /deliberativeSubsystem/getChildPerformance:i
  * _checkMutualGazeIn | /deliberativeSubsystem/checkMutualGaze:i
  * _getArmAngleIn | /deliberativeSubsystem/getArmAngle:i
  * _getBodyIn | /deliberativeSubsystem/getBody:i
  * _getBodyPoseIn | /deliberativeSubsystem/getBodyPose:i
  * _getEyeGazeIn | /deliberativeSubsystem/getEyeGaze:i
  * _getEyesIn | /deliberativeSubsystem/getEyes:i
  * _getFacesIn | /deliberativeSubsystem/getFaces:i
  * _getGripLocationIn | /deliberativeSubsystem/getGripLocation:i
  * _getHandsIn | /deliberativeSubsystem/getHands:i
  * _getHeadIn | /deliberativeSubsystem/getHead:i
  * _getHeadGazeIn | /deliberativeSubsystem/getHeadGaze:i
  * _getObjectsIn | /deliberativeSubsystem/getObjects:i
  * _getObjectTableDistanceIn | /deliberativeSubsystem/getObjectTableDistance:i
  * _getSoundDirectionIn | /deliberativeSubsystem/getSoundDirection:i
  * _identifyFaceIn | /deliberativeSubsystem/identifyFace:i
  * _identifyFaceExpressionIn | /deliberativeSubsystem/identifyFaceExpression:i
  * _identifyObjectIn | /deliberativeSubsystem/identifyObject:i
  * _identifyTrajectoryIn | /deliberativeSubsystem/identifyTrajectory:i
  * _identifyVoiceIn | /deliberativeSubsystem/identifyVoice:i
  * _recognizeSpeechIn | /deliberativeSubsystem/recognizeSpeech:i
  * _trackFaceIn | /deliberativeSubsystem/trackFace:i
  * _trackObjectIn | /deliberativeSubsystem/trackObject:i
  * _actionFeedbackIn | /deliberativeSubsystem/actionFeedback:i
  * _interventionCommandIn | /deliberativeSubsystem/interventionCommand:i
  * _selectedActionIn | /deliberativeSubsystem/selectedAction:i
  * _userDelibIn | /deliberativeSubsystem/userDelib:i
  * _sandtrayEventIn | /deliberativeSubsystem/sandtrayEvent:i
  * _sandtrayReturnIn | /deliberativeSubsystem/sandtrayReturn:i
  * _robotSensorsIn | /deliberativeSubsystem/robotSensors:i
  * _emergencyIn | /deliberativeSubsystem/emergency:i
  *
  * - description
  *   
  * Key | Value
  * :-- | :---- 
  * _getEyeGazeOut | /deliberativeSubsystem/getEyeGaze:o    
  * _getGripLocationOut | /deliberativeSubsystem/getGripLocation:o    
  * _getHeadGazeOut | /deliberativeSubsystem/getHeadGaze:o    
  * _getObjectsOut | /deliberativeSubsystem/getObjects:o    
  * _getObjectTableDistanceOut | /deliberativeSubsystem/getObjectTableDistance:o    
  * _getSoundDirectionOut | /deliberativeSubsystem/getSoundDirection:o    
  * _identifyFaceOut | /deliberativeSubsystem/identifyFace:o    
  * _identifyFaceExpressionOut | /deliberativeSubsystem/identifyFaceExpression:o    
  * _identifyObjectOut | /deliberativeSubsystem/identifyObject:o    
  * _identifyTrajectoryOut | /deliberativeSubsystem/identifyTrajectory:o    
  * _trackFaceOut | /deliberativeSubsystem/trackFace:o    
  * _trackHandOut | /deliberativeSubsystem/trackHand:o    
  * _trackObjectOut | /deliberativeSubsystem/trackObject:o    
  * _interactionEventOut | /deliberativeSubsystem/interactionEvent:o    
  * _getInterventionStatusOut | /deliberativeSubsystem/getInterventionStatus:o    
  * _attentionBiasOut | /deliberativeSubsystem/attentionBias:o    
  * _commandSuccessOut | /deliberativeSubsystem/commandSuccess:o    
  * _startStopOut | /deliberativeSubsystem/startStop:o    
  * _deliberativeFeedbackOut | /deliberativeSubsystem/deliberativeFeedback:o    
  * _sensorySummaryOut | /deliberativeSubsystem/sensorySummary:o    
  * _sandtrayCommandOut | /deliberativeSubsystem/sandtrayCommand:o    
  * _suggestedActionOut | /deliberativeSubsystem/suggestedAction:o    
  *
  * - description
  *
  * \section portsa_sec Ports Accessed
  * 
  * - None
  *                      
  * \section portsc_sec Ports Created
  *
  * <b>Input ports</b>
  *
  *  - \c /deliberativeSubsystem
  *
  *  - \c /deliberativeSubsystem/getChildBehaviour:i
  *  - \c /deliberativeSubsystem/getChildPerformance:i
  *  - \c /deliberativeSubsystem/checkMutualGaze:i
  *  - \c /deliberativeSubsystem/getArmAngle:i
  *  - \c /deliberativeSubsystem/getBody:i
  *  - \c /deliberativeSubsystem/getBodyPose:i
  *  - \c /deliberativeSubsystem/getEyeGaze:i
  *  - \c /deliberativeSubsystem/getEyes:i
  *  - \c /deliberativeSubsystem/getFaces:i
  *  - \c /deliberativeSubsystem/getGripLocation:i
  *  - \c /deliberativeSubsystem/getHands:i
  *  - \c /deliberativeSubsystem/getHead:i
  *  - \c /deliberativeSubsystem/getHeadGaze:i
  *  - \c /deliberativeSubsystem/getObjects:i
  *  - \c /deliberativeSubsystem/getObjectTableDistance:i
  *  - \c /deliberativeSubsystem/getSoundDirection:i
  *  - \c /deliberativeSubsystem/identifyFace:i
  *  - \c /deliberativeSubsystem/identifyFaceExpression:i
  *  - \c /deliberativeSubsystem/identifyObject:i
  *  - \c /deliberativeSubsystem/identifyTrajectory:i
  *  - \c /deliberativeSubsystem/identifyVoice:i
  *  - \c /deliberativeSubsystem/recognizeSpeech:i
  *  - \c /deliberativeSubsystem/trackFace:i
  *  - \c /deliberativeSubsystem/trackObject:i
  *  - \c /deliberativeSubsystem/actionFeedback:i
  *  - \c /deliberativeSubsystem/interventionCommand:i
  *  - \c /deliberativeSubsystem/selectedAction:i
  *  - \c /deliberativeSubsystem/userDelib:i
  *  - \c /deliberativeSubsystem/sandtrayEvent:i
  *  - \c /deliberativeSubsystem/sandtrayReturn:i
  *  - \c /deliberativeSubsystem/robotSensors:i
  *  - \c /deliberativeSubsystem/emergency:i
  *
  * <b>Output ports</b>
  *
  *  - \c /deliberativeSubsystem
  *
  *  - \c /deliberativeSubsystem/getEyeGaze:o
  *  - \c /deliberativeSubsystem/getGripLocation:o
  *  - \c /deliberativeSubsystem/getHeadGaze:o
  *  - \c /deliberativeSubsystem/getObjects:o
  *  - \c /deliberativeSubsystem/getObjectTableDistance:o
  *  - \c /deliberativeSubsystem/getSoundDirection:o
  *  - \c /deliberativeSubsystem/identifyFace:o
  *  - \c /deliberativeSubsystem/identifyFaceExpression:o
  *  - \c /deliberativeSubsystem/identifyObject:o
  *  - \c /deliberativeSubsystem/identifyTrajectory:o
  *  - \c /deliberativeSubsystem/trackFace:o
  *  - \c /deliberativeSubsystem/trackHand:o
  *  - \c /deliberativeSubsystem/trackObject:o
  *  - \c /deliberativeSubsystem/interactionEvent:o
  *  - \c /deliberativeSubsystem/getInterventionStatus:o
  *  - \c /deliberativeSubsystem/attentionBias:o
  *  - \c /deliberativeSubsystem/commandSuccess:o
  *  - \c /deliberativeSubsystem/startStop:o
  *  - \c /deliberativeSubsystem/deliberativeFeedback:o
  *  - \c /deliberativeSubsystem/sensorySummary:o
  *  - \c /deliberativeSubsystem/sandtrayCommand:o
  *  - \c /deliberativeSubsystem/suggestedAction:o
  *
  * <b>Port types </b>
  *
  * The functional specification only names the ports to be used to communicate with the component 
  * but doesn't say anything about the data transmitted on the ports. This is defined by the following code. 
  *
  * \c BufferedPort<VectorOf<double>>		getChildBehaviourIn; 
  * \c BufferedPort<VectorOf<double>>		getChildPerformanceIn; 
  * \c BufferedPort<VectorOf<int>>		checkMutualGazeIn; 
  * \c BufferedPort<VectorOf<double>>		getArmAngleIn; 
  * \c BufferedPort<VectorOf<double>>		getBodyIn; 
  * \c BufferedPort<VectorOf<double>>		getBodyPoseIn; 
  * \c BufferedPort<VectorOf<double>>		getEyeGazeIn; 
  * \c BufferedPort<VectorOf<double>>		getEyesIn; 
  * \c BufferedPort<VectorOf<double>>		getFacesIn; 
  * \c BufferedPort<VectorOf<double>>		getGripLocationIn; 
  * \c BufferedPort<VectorOf<double>>		getHandsIn; 
  * \c BufferedPort<VectorOf<double>>		getHeadIn; 
  * \c BufferedPort<VectorOf<double>>		getHeadGazeIn; 
  * \c BufferedPort<VectorOf<double>>		getObjectsIn; 
  * \c BufferedPort<VectorOf<double>>		getObjectTableDistanceIn; 
  * \c BufferedPort<VectorOf<double>>		getSoundDirectionIn; 
  * \c BufferedPort<VectorOf<double>>		identifyFaceIn; 
  * \c BufferedPort<VectorOf<double>>		identifyFaceExpressionIn; 
  * \c BufferedPort<VectorOf<double>>		identifyObjectIn; 
  * \c BufferedPort<VectorOf<double>>		identifyTrajectoryIn; 
  * \c BufferedPort<VectorOf<int>>		identifyVoiceIn; 
  * \c BufferedPort<Bottle>		recognizeSpeechIn; 
  * \c BufferedPort<VectorOf<double>>		trackFaceIn; 
  * \c BufferedPort<VectorOf<double>>		trackObjectIn; 
  * \c BufferedPort<Bottle>		actionFeedbackIn; 
  * \c BufferedPort<Bottle>		interventionCommandIn; 
  * \c BufferedPort<Bottle>		selectedActionIn; 
  * \c BufferedPort<Bottle>		userDelibIn; 
  * \c BufferedPort<Bottle>		sandtrayEventIn; 
  * \c BufferedPort<Bottle>		sandtrayReturnIn; 
  * \c BufferedPort<Bottle>		robotSensorsIn; 
  * \c BufferedPort<Bottle>		emergencyIn; 
  * \c BufferedPort<VectorOf<double>>		getEyeGazeOut; 
  * \c BufferedPort<VectorOf<double>>		getGripLocationOut; 
  * \c BufferedPort<VectorOf<double>>		getHeadGazeOut; 
  * \c BufferedPort<VectorOf<double>>		getObjectsOut; 
  * \c BufferedPort<VectorOf<double>>		getObjectTableDistanceOut; 
  * \c BufferedPort<VectorOf<double>>		getSoundDirectionOut; 
  * \c BufferedPort<VectorOf<double>>		identifyFaceOut; 
  * \c BufferedPort<VectorOf<double>>		identifyFaceExpressionOut; 
  * \c BufferedPort<VectorOf<double>>		identifyObjectOut; 
  * \c BufferedPort<VectorOf<double>>		identifyTrajectoryOut; 
  * \c BufferedPort<VectorOf<double>>		trackFaceOut; 
  * \c BufferedPort<VectorOf<double>>		trackHandOut; 
  * \c BufferedPort<VectorOf<double>>		trackObjectOut; 
  * \c BufferedPort<VectorOf<int>>		interactionEventOut; 
  * \c BufferedPort<VectorOf<int>>		getInterventionStatusOut; 
  * \c BufferedPort<Bottle>		attentionBiasOut; 
  * \c BufferedPort<VectorOf<int>>		commandSuccessOut; 
  * \c BufferedPort<VectorOf<int>>		startStopOut; 
  * \c BufferedPort<Bottle>		deliberativeFeedbackOut; 
  * \c BufferedPort<Bottle>		sensorySummaryOut; 
  * \c BufferedPort<Bottle>		sandtrayCommandOut; 
  * \c BufferedPort<Bottle>		suggestedActionOut; 
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \section conf_file_sec Configuration Files
  *
  * \c deliberativeSubsystem.ini   
  *
  * \section example_sec Example Instantiation of the Component
  * 
  * <tt>deliberativeSubsystem --name deliberativeSubsystem --context deliberativeSubsystem/config --from deliberativeSubsystem.ini </tt>
  *
  * \author 
  * 
  * <James Kennedy>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */
  
/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  James Kennedy, Plymouth University 
 * Email:   james.kennedy@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
  
 /* 
  * Audit Trail
  * -----------
  * 21/02/2017 Version 1.0: ... (James Kennedy)
  */ 
 
#ifndef DELIBERATIVESUBSYSTEM
#define DELIBERATIVESUBSYSTEM

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class DeliberativeSubsystemYarpInterface;
class DeliberativeSubsystemController;

class GetChildBehaviourInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getChildBehaviourInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetChildPerformanceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getChildPerformanceInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class CheckMutualGazeInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& checkMutualGazeInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetArmAngleInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getArmAngleInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetBodyInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getBodyInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetBodyPoseInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getBodyPoseInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetEyeGazeInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getEyeGazeInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetEyesInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getEyesInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetFacesInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getFacesInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetGripLocationInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getGripLocationInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetHandsInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getHandsInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetHeadInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getHeadInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetHeadGazeInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getHeadGazeInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetObjectsInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getObjectsInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetObjectTableDistanceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getObjectTableDistanceInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class GetSoundDirectionInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getSoundDirectionInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class IdentifyFaceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& identifyFaceInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class IdentifyFaceExpressionInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& identifyFaceExpressionInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class IdentifyObjectInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& identifyObjectInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class IdentifyTrajectoryInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& identifyTrajectoryInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class IdentifyVoiceInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& identifyVoiceInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class RecognizeSpeechInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& recognizeSpeechInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class TrackFaceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& trackFaceInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class TrackObjectInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& trackObjectInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class ActionFeedbackInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& actionFeedbackInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class InterventionCommandInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& interventionCommandInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class SelectedActionInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& selectedActionInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class UserDelibInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& userDelibInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class SandtrayEventInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& sandtrayEventInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class SandtrayReturnInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& sandtrayReturnInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class RobotSensorsInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& robotSensorsInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};

class EmergencyInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& emergencyInData);
   DeliberativeSubsystemYarpInterface *_deliberativeSubsystemYarpInterface;
public:
   void setDeliberativeSubsystem(DeliberativeSubsystemYarpInterface* yarpInterface);
};



class DeliberativeSubsystemThread : public yarp::os::Thread{
private:
	/* class variables */
	yarp::os::BufferedPort<VectorOf<double>>* _getChildBehaviourIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getChildPerformanceIn;
	yarp::os::BufferedPort<VectorOf<int>>* _checkMutualGazeIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getArmAngleIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getBodyIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getBodyPoseIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getEyeGazeIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getEyesIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getFacesIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getGripLocationIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getHandsIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getHeadIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getHeadGazeIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getObjectsIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getObjectTableDistanceIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getSoundDirectionIn;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyFaceIn;
	yarp::os::BufferedPort<VectorOf<int>>* _identifyFaceExpressionIn;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyObjectIn;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyTrajectoryIn;
	yarp::os::BufferedPort<VectorOf<int>>* _identifyVoiceIn;
	yarp::os::BufferedPort<Bottle>* _recognizeSpeechIn;
	yarp::os::BufferedPort<VectorOf<double>>* _trackFaceIn;
	yarp::os::BufferedPort<VectorOf<double>>* _trackObjectIn;
	yarp::os::BufferedPort<Bottle>* _actionFeedbackIn;
	yarp::os::BufferedPort<Bottle>* _interventionCommandIn;
	yarp::os::BufferedPort<Bottle>* _selectedActionIn;
	yarp::os::BufferedPort<Bottle>* _userDelibIn;
	yarp::os::BufferedPort<Bottle>* _sandtrayEventIn;
	yarp::os::BufferedPort<Bottle>* _sandtrayReturnIn;
	yarp::os::BufferedPort<Bottle>* _robotSensorsIn;
	yarp::os::BufferedPort<Bottle>* _emergencyIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getEyeGazeOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getGripLocationOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getHeadGazeOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getObjectsOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getObjectTableDistanceOut;
	yarp::os::BufferedPort<VectorOf<double>>* _getSoundDirectionOut;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyFaceOut;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyFaceExpressionOut;
	yarp::os::BufferedPort<VectorOf<double>>* _identifyObjectOut;
	yarp::os::BufferedPort<VectorOf<int>>* _identifyTrajectoryOut;
	yarp::os::BufferedPort<VectorOf<double>>* _trackFaceOut;
	yarp::os::BufferedPort<VectorOf<double>>* _trackHandOut;
	yarp::os::BufferedPort<VectorOf<double>>* _trackObjectOut;
	yarp::os::BufferedPort<VectorOf<int>>* _interactionEventOut;
	yarp::os::BufferedPort<VectorOf<int>>* _getInterventionStatusOut;
	yarp::os::BufferedPort<Bottle>* _attentionBiasOut;
	yarp::os::BufferedPort<VectorOf<int>>* _commandSuccessOut;
	yarp::os::BufferedPort<VectorOf<int>>* _startStopOut;
	yarp::os::BufferedPort<Bottle>* _deliberativeFeedbackOut;
	yarp::os::BufferedPort<Bottle>* _sensorySummaryOut;
	yarp::os::BufferedPort<Bottle>* _sandtrayCommandOut;
	yarp::os::BufferedPort<Bottle>* _suggestedActionOut;
	DeliberativeSubsystemYarpInterface* _yarpInterface;
	GetChildBehaviourInAnalyser *_getChildBehaviourInAnalyser;
	GetChildPerformanceInAnalyser *_getChildPerformanceInAnalyser;
	CheckMutualGazeInAnalyser *_checkMutualGazeInAnalyser;
	GetArmAngleInAnalyser *_getArmAngleInAnalyser;
	GetBodyInAnalyser *_getBodyInAnalyser;
	GetBodyPoseInAnalyser *_getBodyPoseInAnalyser;
	GetEyeGazeInAnalyser *_getEyeGazeInAnalyser;
	GetEyesInAnalyser *_getEyesInAnalyser;
	GetFacesInAnalyser *_getFacesInAnalyser;
	GetGripLocationInAnalyser *_getGripLocationInAnalyser;
	GetHandsInAnalyser *_getHandsInAnalyser;
	GetHeadInAnalyser *_getHeadInAnalyser;
	GetHeadGazeInAnalyser *_getHeadGazeInAnalyser;
	GetObjectsInAnalyser *_getObjectsInAnalyser;
	GetObjectTableDistanceInAnalyser *_getObjectTableDistanceInAnalyser;
	GetSoundDirectionInAnalyser *_getSoundDirectionInAnalyser;
	IdentifyFaceInAnalyser *_identifyFaceInAnalyser;
	IdentifyFaceExpressionInAnalyser *_identifyFaceExpressionInAnalyser;
	IdentifyObjectInAnalyser *_identifyObjectInAnalyser;
	IdentifyTrajectoryInAnalyser *_identifyTrajectoryInAnalyser;
	IdentifyVoiceInAnalyser *_identifyVoiceInAnalyser;
	RecognizeSpeechInAnalyser *_recognizeSpeechInAnalyser;
	TrackFaceInAnalyser *_trackFaceInAnalyser;
	TrackObjectInAnalyser *_trackObjectInAnalyser;
	ActionFeedbackInAnalyser *_actionFeedbackInAnalyser;
	InterventionCommandInAnalyser *_interventionCommandInAnalyser;
	SelectedActionInAnalyser *_selectedActionInAnalyser;
	UserDelibInAnalyser *_userDelibInAnalyser;
	SandtrayEventInAnalyser *_sandtrayEventInAnalyser;
	SandtrayReturnInAnalyser *_sandtrayReturnInAnalyser;
	RobotSensorsInAnalyser *_robotSensorsInAnalyser;
	EmergencyInAnalyser *_emergencyInAnalyser;
	
public:
	/* class methods */
	DeliberativeSubsystemThread(BufferedPort<VectorOf<double>>* getChildBehaviourIn, BufferedPort<VectorOf<double>>* getChildPerformanceIn, BufferedPort<VectorOf<int>>* checkMutualGazeIn, BufferedPort<VectorOf<double>>* getArmAngleIn, BufferedPort<VectorOf<double>>* getBodyIn, BufferedPort<VectorOf<double>>* getBodyPoseIn, BufferedPort<VectorOf<double>>* getEyeGazeIn, BufferedPort<VectorOf<double>>* getEyesIn, BufferedPort<VectorOf<double>>* getFacesIn, BufferedPort<VectorOf<double>>* getGripLocationIn, BufferedPort<VectorOf<double>>* getHandsIn, BufferedPort<VectorOf<double>>* getHeadIn, BufferedPort<VectorOf<double>>* getHeadGazeIn, BufferedPort<VectorOf<double>>* getObjectsIn, BufferedPort<VectorOf<double>>* getObjectTableDistanceIn, BufferedPort<VectorOf<double>>* getSoundDirectionIn, BufferedPort<VectorOf<double>>* identifyFaceIn, BufferedPort<VectorOf<int>>* identifyFaceExpressionIn, BufferedPort<VectorOf<double>>* identifyObjectIn, BufferedPort<VectorOf<double>>* identifyTrajectoryIn, BufferedPort<VectorOf<int>>* identifyVoiceIn, BufferedPort<Bottle>* recognizeSpeechIn, BufferedPort<VectorOf<double>>* trackFaceIn, BufferedPort<VectorOf<double>>* trackObjectIn, BufferedPort<Bottle>* actionFeedbackIn, BufferedPort<Bottle>* interventionCommandIn, BufferedPort<Bottle>* selectedActionIn, BufferedPort<Bottle>* userDelibIn, BufferedPort<Bottle>* sandtrayEventIn, BufferedPort<Bottle>* sandtrayReturnIn, BufferedPort<Bottle>* robotSensorsIn, BufferedPort<Bottle>* emergencyIn, BufferedPort<VectorOf<double>>* getEyeGazeOut, BufferedPort<VectorOf<double>>* getGripLocationOut, BufferedPort<VectorOf<double>>* getHeadGazeOut, BufferedPort<VectorOf<double>>* getObjectsOut, BufferedPort<VectorOf<double>>* getObjectTableDistanceOut, BufferedPort<VectorOf<double>>* getSoundDirectionOut, BufferedPort<VectorOf<double>>* identifyFaceOut, BufferedPort<VectorOf<double>>* identifyFaceExpressionOut, BufferedPort<VectorOf<double>>* identifyObjectOut, BufferedPort<VectorOf<int>>* identifyTrajectoryOut, BufferedPort<VectorOf<double>>* trackFaceOut, BufferedPort<VectorOf<double>>* trackHandOut, BufferedPort<VectorOf<double>>* trackObjectOut, BufferedPort<VectorOf<int>>* interactionEventOut, BufferedPort<VectorOf<int>>* getInterventionStatusOut, BufferedPort<Bottle>* attentionBiasOut, BufferedPort<VectorOf<int>>* commandSuccessOut, BufferedPort<VectorOf<int>>* startStopOut, BufferedPort<Bottle>* deliberativeFeedbackOut, BufferedPort<Bottle>* sensorySummaryOut, BufferedPort<Bottle>* sandtrayCommandOut, BufferedPort<Bottle>* suggestedActionOut);
   void setYarpInterface(DeliberativeSubsystemYarpInterface* yarpInterface);
	bool threadInit();
	void threadRelease();
	void sendToGetEyeGaze(VectorOf<double> data);
	void sendToGetGripLocation(VectorOf<double> data);
	void sendToGetHeadGaze(VectorOf<double> data);
	void sendToGetObjects(VectorOf<double> data);
	void sendToGetObjectTableDistance(VectorOf<double> data);
	void sendToGetSoundDirection(VectorOf<double> data);
	void sendToIdentifyFace(VectorOf<double> data);
	void sendToIdentifyFaceExpression(VectorOf<double> data);
	void sendToIdentifyObject(VectorOf<double> data);
	void sendToIdentifyTrajectory(VectorOf<int> data);
	void sendToTrackFace(VectorOf<double> data);
	void sendToTrackHand(VectorOf<double> data);
	void sendToTrackObject(VectorOf<double> data);
	void sendToInteractionEvent(VectorOf<int> data);
	void sendToGetInterventionStatus(VectorOf<int> data);
	void sendToAttentionBias(Bottle data);
	void sendToCommandSuccess(VectorOf<int> data);
	void sendToStartStop(VectorOf<int> data);
	void sendToDeliberativeFeedback(Bottle data);
	void sendToSensorySummary(Bottle data);
	void sendToSandtrayCommand(Bottle data);
	void sendToSuggestedAction(Bottle data);
	void run();
};

class DeliberativeSubsystem : public yarp::os::RFModule{
private:
	/* module parameters */
	std::string _moduleName;
	std::string _getChildBehaviourInName;
	std::string _getChildPerformanceInName;
	std::string _checkMutualGazeInName;
	std::string _getArmAngleInName;
	std::string _getBodyInName;
	std::string _getBodyPoseInName;
	std::string _getEyeGazeInName;
	std::string _getEyesInName;
	std::string _getFacesInName;
	std::string _getGripLocationInName;
	std::string _getHandsInName;
	std::string _getHeadInName;
	std::string _getHeadGazeInName;
	std::string _getObjectsInName;
	std::string _getObjectTableDistanceInName;
	std::string _getSoundDirectionInName;
	std::string _identifyFaceInName;
	std::string _identifyFaceExpressionInName;
	std::string _identifyObjectInName;
	std::string _identifyTrajectoryInName;
	std::string _identifyVoiceInName;
	std::string _recognizeSpeechInName;
	std::string _trackFaceInName;
	std::string _trackObjectInName;
	std::string _actionFeedbackInName;
	std::string _interventionCommandInName;
	std::string _selectedActionInName;
	std::string _userDelibInName;
	std::string _sandtrayEventInName;
	std::string _sandtrayReturnInName;
	std::string _robotSensorsInName;
	std::string _emergencyInName;
	std::string _getEyeGazeOutName;
	std::string _getGripLocationOutName;
	std::string _getHeadGazeOutName;
	std::string _getObjectsOutName;
	std::string _getObjectTableDistanceOutName;
	std::string _getSoundDirectionOutName;
	std::string _identifyFaceOutName;
	std::string _identifyFaceExpressionOutName;
	std::string _identifyObjectOutName;
	std::string _identifyTrajectoryOutName;
	std::string _trackFaceOutName;
	std::string _trackHandOutName;
	std::string _trackObjectOutName;
	std::string _interactionEventOutName;
	std::string _getInterventionStatusOutName;
	std::string _attentionBiasOutName;
	std::string _commandSuccessOutName;
	std::string _startStopOutName;
	std::string _deliberativeFeedbackOutName;
	std::string _sensorySummaryOutName;
	std::string _sandtrayCommandOutName;
	std::string _suggestedActionOutName;
	std::string _handlerPortName;

	/* class variables */
	yarp::os::BufferedPort<VectorOf<double>> _getChildBehaviourIn;
	yarp::os::BufferedPort<VectorOf<double>> _getChildPerformanceIn;
	yarp::os::BufferedPort<VectorOf<int>> _checkMutualGazeIn;
	yarp::os::BufferedPort<VectorOf<double>> _getArmAngleIn;
	yarp::os::BufferedPort<VectorOf<double>> _getBodyIn;
	yarp::os::BufferedPort<VectorOf<double>> _getBodyPoseIn;
	yarp::os::BufferedPort<VectorOf<double>> _getEyeGazeIn;
	yarp::os::BufferedPort<VectorOf<double>> _getEyesIn;
	yarp::os::BufferedPort<VectorOf<double>> _getFacesIn;
	yarp::os::BufferedPort<VectorOf<double>> _getGripLocationIn;
	yarp::os::BufferedPort<VectorOf<double>> _getHandsIn;
	yarp::os::BufferedPort<VectorOf<double>> _getHeadIn;
	yarp::os::BufferedPort<VectorOf<double>> _getHeadGazeIn;
	yarp::os::BufferedPort<VectorOf<double>> _getObjectsIn;
	yarp::os::BufferedPort<VectorOf<double>> _getObjectTableDistanceIn;
	yarp::os::BufferedPort<VectorOf<double>> _getSoundDirectionIn;
	yarp::os::BufferedPort<VectorOf<double>> _identifyFaceIn;
	yarp::os::BufferedPort<VectorOf<int>> _identifyFaceExpressionIn;
	yarp::os::BufferedPort<VectorOf<double>> _identifyObjectIn;
	yarp::os::BufferedPort<VectorOf<double>> _identifyTrajectoryIn;
	yarp::os::BufferedPort<VectorOf<int>> _identifyVoiceIn;
	yarp::os::BufferedPort<Bottle> _recognizeSpeechIn;
	yarp::os::BufferedPort<VectorOf<double>> _trackFaceIn;
	yarp::os::BufferedPort<VectorOf<double>> _trackObjectIn;
	yarp::os::BufferedPort<Bottle> _actionFeedbackIn;
	yarp::os::BufferedPort<Bottle> _interventionCommandIn;
	yarp::os::BufferedPort<Bottle> _selectedActionIn;
	yarp::os::BufferedPort<Bottle> _userDelibIn;
	yarp::os::BufferedPort<Bottle> _sandtrayEventIn;
	yarp::os::BufferedPort<Bottle> _sandtrayReturnIn;
	yarp::os::BufferedPort<Bottle> _robotSensorsIn;
	yarp::os::BufferedPort<Bottle> _emergencyIn;
	yarp::os::BufferedPort<VectorOf<double>> _getEyeGazeOut;
	yarp::os::BufferedPort<VectorOf<double>> _getGripLocationOut;
	yarp::os::BufferedPort<VectorOf<double>> _getHeadGazeOut;
	yarp::os::BufferedPort<VectorOf<double>> _getObjectsOut;
	yarp::os::BufferedPort<VectorOf<double>> _getObjectTableDistanceOut;
	yarp::os::BufferedPort<VectorOf<double>> _getSoundDirectionOut;
	yarp::os::BufferedPort<VectorOf<double>> _identifyFaceOut;
	yarp::os::BufferedPort<VectorOf<double>> _identifyFaceExpressionOut;
	yarp::os::BufferedPort<VectorOf<double>> _identifyObjectOut;
	yarp::os::BufferedPort<VectorOf<int>> _identifyTrajectoryOut;
	yarp::os::BufferedPort<VectorOf<double>> _trackFaceOut;
	yarp::os::BufferedPort<VectorOf<double>> _trackHandOut;
	yarp::os::BufferedPort<VectorOf<double>> _trackObjectOut;
	yarp::os::BufferedPort<VectorOf<int>> _interactionEventOut;
	yarp::os::BufferedPort<VectorOf<int>> _getInterventionStatusOut;
	yarp::os::BufferedPort<Bottle> _attentionBiasOut;
	yarp::os::BufferedPort<VectorOf<int>> _commandSuccessOut;
	yarp::os::BufferedPort<VectorOf<int>> _startStopOut;
	yarp::os::BufferedPort<Bottle> _deliberativeFeedbackOut;
	yarp::os::BufferedPort<Bottle> _sensorySummaryOut;
	yarp::os::BufferedPort<Bottle> _sandtrayCommandOut;
	yarp::os::BufferedPort<Bottle> _suggestedActionOut;
	yarp::os::Port _handlerPort;

	/* pointer to a new thread */
	DeliberativeSubsystemThread* _deliberativeSubsystemThread;
   DeliberativeSubsystemController* _deliberativeSubsystemController;
   DeliberativeSubsystemYarpInterface* _deliberativeSubsystemYarpInterface;
public:
	/* class methods */
	bool configure(yarp::os::ResourceFinder &rf);
	bool interruptModule();
	bool close();
	bool respond(const yarp::os::Bottle& command, Bottle& reply);
	double getPeriod();
	bool updateModule();
};

#endif
