 /** @file sandtrayServerController.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent sandtrayServer
  * 
  * Main class with code, use the yarpInterface class to communicate with the other components.
  * 
  * \section lib_sec Libraries
  *
  * None
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <James Kennedy>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  James Kennedy, Plymouth University 
 * Email:   james.kennedy@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /* 
  * Audit Trail
  * -----------
  * 22/06/2016 Version 1.0: ... (James Kennedy)
  */ 
 
#ifndef SANDTRAYSERVERCONTROLLER
#define SANDTRAYSERVERCONTROLLER

#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <winsock2.h>
#include <windows.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>

#include <yarp/os/Thread.h>

using namespace yarp::os;

#pragma comment (lib, "Ws2_32.lib")

#define DEBUG 1
#define DEFAULT_CONTROL_PORT "86000"
#define DEFAULT_BUFLEN 2048

class SandtrayServerYarpInterface;
class SandtrayControl;

class SandtrayServerController{
private:
	SandtrayServerYarpInterface* _yarpInterface;
		
public:
	/* class methods */
	SandtrayServerController(SandtrayServerYarpInterface *yarpInterface, float distanceRobotScreenX = 30, float distanceRobotScreenZ = -10);
	~SandtrayServerController();

	SandtrayControl *sandtrayControl;
	bool _commandRequestBusy;				//if true then the component is already handling a command
	
	void close();
	std::string processInput(std::vector<std::string> dataIn);
	void getFromCommands(std::string str);
};

class SandtrayControl
{
private:
	std::string name;						//name of the instance for debug

	bool debug;								//to show additional debug info
	bool isConnected;						//is this connected to the relevant GameEngine socket?
	bool isStopping;						//has stop listening and processing been requested?
	bool isFirstLoop;						//flag for first loop as we need to do extra processing

	struct addrinfo *result;
	struct addrinfo hints;
	int iResult;
	SOCKET controlListenSocket;
	SOCKET controlClientSocket;
	char recvbuf[DEFAULT_BUFLEN];
	int iSendResult;
	int recvbuflen;

	SandtrayServerYarpInterface* _yarpInterface;
	SandtrayServerController* _sandtrayServerController;

	bool socketInit(void);					//initialise the socket to listen to the GameEngine
	std::string listenCommand(void);		//listen to the socket for data, return the command in string form
	bool sendCommand(std::string message);	//send a control message (in string form) to the GameEngine
	bool socketClose();						//stop listening and close the port
public:
	SandtrayControl(SandtrayServerYarpInterface* yarpInterface, SandtrayServerController* sandtrayController);
	void getCommand(std::string outMessage);
	bool init();
	void release();
	void run();
};

#endif
