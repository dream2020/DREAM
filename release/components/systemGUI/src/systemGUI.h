 /** @file systemGUI.h Interface file for systemGUI Component
  *
  * Version 2.0
  * 
  * 25/01/2017
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  * \section component_description Component Description
  *
 * Functionally, the component allows the therapist to supervise the system by sending commands to the SMS and actuation subsystems.
  * To start a session, the therapist inputs a user name, a session name, and a session partner. 
  * Tabs:
  *  - Load Script:		This tab is used start/Stop a script.
  *						When the system is automatically following a script, the therapist can approve/disapprove a proposed action. 
  *						In case a proposed action is disapproved, the therapists can select a new action by clicking off-script buttons.
  *						Afterwards, if the button "Back to script" is clicked, the script continues.
  *  - Between Scripts: This tab is used control the robot when waiting between the scripts.
  *						Functions: Dance, Wake up/Sleep, Say a text, enable/disable acttentionReaction subsystem.
  *  - Child History:	This tab is used to display the history of a child.
  *  - Developer Info:	This tab is used to log in/out commands.
  * 
  * \section lib_sec Libraries
  *
  * - YARP
  * - FLTK 
  * - guiUtilities.lib
  * - Boost
  *
  * \section parameters_sec Parameters
  * 
  * <b>Command-line Parameters </b> 
  * 
  * The following key-value pairs can be specified as command-line parameters 
  * by prefixing \c -- to the key e.g. \c --from file.ini. 
  * The value part can be changed to suit your needs; the default values are 
  * shown below. 
  *
  * - \c from \c systemGUI.ini 
  *    - specifies the configuration file
  *
  * - \c context \c component/systemGUI/configuration
  *   - specifies the sub-path from \c $DREAM_ROOT/release
  *   to the configuration file
  *
  * - \c name \c systemGUI   
  *   - specifies the name of the component (used to form the stem of component port names)  
  *
  *
  * <b>Configuration File Parameters </b>
  *
  * The following key-value pairs can be specified as parameters in the configuration file 
  * (they can also be specified as command-line parameters if you so wish). 
  * The value part can be changed to suit your needs; the default values are shown below. 
  * 
  * Key | Value
  * :-- | :----  
  * _getChildBehaviourIn | /systemGUI/getChildBehaviour:i
  * _getChildPerformanceIn | /systemGUI/getChildPerformance:i
  * _proposedToSupervisorIn | /systemGUI/proposedToSupervisor:i
  * _smsSummaryIn | /systemGUI/smsSummary:i
  *
  * - description
  *   
  * Key | Value
  * :-- | :---- 
  * _selectedBySupervisorOut | /systemGUI/selectedBySupervisor:o    
  * _therapistCommandOut | /systemGUI/therapistCommand:o    
  * _userIDOut | /systemGUI/userID:o
  * _interventionCommandOut | /systemGUI/interventionCommand:o
  *
  * - description
  *
  * \section portsa_sec Ports Accessed
  * 
  * - None
  *                      
  * \section portsc_sec Ports Created
  *
  * <b>Input ports</b>
  *
  *  - \c /systemGUI
  *
  *  - \c /systemGUI/getChildBehaviour:i
  *  - \c /systemGUI/getChildPerformance:i
  *  - \c /systemGUI/proposedToSupervisor:i
  *  - \c /systemGUI/smsSummary:i
  *
  * <b>Output ports</b>
  *
  *  - \c /systemGUI
  *
  *  - \c /systemGUI/selectedBySupervisor:o
  *  - \c /systemGUI/therapistCommand:o
  *  - \c /systemGUI/userID:o
  *  - \c /systemGUI/interventionCommand:o
  *
  * <b>Port types </b>
  *
  * The functional specification only names the ports to be used to communicate with the component 
  * but doesn't say anything about the data transmitted on the ports. This is defined by the following code. 
  *
  * \c BufferedPort<VectorOf<double>>		getChildBehaviourIn; 
  * \c BufferedPort<VectorOf<double>>		getChildPerformanceIn; 
  * \c BufferedPort<Bottle>		proposedToSupervisorIn; 
  * \c BufferedPort<Bottle>		smsSummaryIn; 
  * \c BufferedPort<Bottle>		selectedBySupervisorOut; 
  * \c BufferedPort<Bottle>		therapistCommandOut; 
  * \c BufferedPort<VectorOf<int>>		userIDOut;
  * \c BufferedPort<Bottle>		interventionCommandOut;
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \section conf_file_sec Configuration Files
  *
  * \c systemGUI.ini   
  *
  * \section example_sec Example Instantiation of the Component
  * 
  * <tt>systemGUI --name systemGUI --context systemGUI/config --from systemGUI.ini </tt>
  *
  * \author 
  * 
  * <Hoang-Long Cao>, <VUB>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */
  
/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Hoang-Long Cao, VUB 
 * Email:   hoang.long.cao@vub.ac.be 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
  
 /* 
  * Audit Trail
  * -----------
  * 22/06/2016 Version 1.0: ... (Hoang-Long Cao)
  * 25/01/2017 Version 2.0: ... (Hoang-Long Cao)
  */ 
 
#ifndef SYSTEMGUI
#define SYSTEMGUI

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class SystemGUIYarpInterface;
class SystemGUIController;

class GetChildBehaviourInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getChildBehaviourInData);
   SystemGUIYarpInterface *_systemGUIYarpInterface;
public:
   void setSystemGUI(SystemGUIYarpInterface* yarpInterface);
};

class GetChildPerformanceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getChildPerformanceInData);
   SystemGUIYarpInterface *_systemGUIYarpInterface;
public:
   void setSystemGUI(SystemGUIYarpInterface* yarpInterface);
};

class ProposedToSupervisorInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& proposedToSupervisorInData);
   SystemGUIYarpInterface *_systemGUIYarpInterface;
public:
   void setSystemGUI(SystemGUIYarpInterface* yarpInterface);
};

class SmsSummaryInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& smsSummaryInData);
   SystemGUIYarpInterface *_systemGUIYarpInterface;
public:
   void setSystemGUI(SystemGUIYarpInterface* yarpInterface);
};



class SystemGUIThread : public yarp::os::Thread{
private:
	/* class variables */
	yarp::os::BufferedPort<VectorOf<double>>* _getChildBehaviourIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getChildPerformanceIn;
	yarp::os::BufferedPort<Bottle>* _proposedToSupervisorIn;
	yarp::os::BufferedPort<Bottle>* _smsSummaryIn;
	yarp::os::BufferedPort<Bottle>* _selectedBySupervisorOut;
	yarp::os::BufferedPort<Bottle>* _therapistCommandOut;
	yarp::os::BufferedPort<VectorOf<int>>* _userIDOut;
	yarp::os::BufferedPort<Bottle>* _interventionCommandOut;

	SystemGUIYarpInterface* _yarpInterface;
	GetChildBehaviourInAnalyser *_getChildBehaviourInAnalyser;
	GetChildPerformanceInAnalyser *_getChildPerformanceInAnalyser;
	ProposedToSupervisorInAnalyser *_proposedToSupervisorInAnalyser;
	SmsSummaryInAnalyser *_smsSummaryInAnalyser;
	
public:
	/* class methods */
	SystemGUIThread(BufferedPort<VectorOf<double>>* getChildBehaviourIn, BufferedPort<VectorOf<double>>* getChildPerformanceIn, BufferedPort<Bottle>* proposedToSupervisorIn, BufferedPort<Bottle>* smsSummaryIn, BufferedPort<Bottle>* selectedBySupervisorOut, BufferedPort<Bottle>* therapistCommandOut, BufferedPort<VectorOf<int>>* userIDOut,BufferedPort<Bottle>* interventionCommandOut);
   void setYarpInterface(SystemGUIYarpInterface* yarpInterface);
	bool threadInit();
	void threadRelease();
	void sendToSelectedBySupervisor(Bottle data);
	void sendToTherapistCommand(Bottle data);
	void sendToUserID(VectorOf<int> data);
	void sendToInterventionCommand(Bottle data);
	void run();
};

class SystemGUI : public yarp::os::RFModule{
private:
	/* module parameters */
	std::string _logo;

	std::string _moduleName;
	std::string _getChildBehaviourInName;
	std::string _getChildPerformanceInName;
	std::string _proposedToSupervisorInName;
	std::string _smsSummaryInName;
	std::string _selectedBySupervisorOutName;
	std::string _therapistCommandOutName;
	std::string _interventionCommandOutName;
	std::string _userIDOutName;
	std::string _handlerPortName;

	/* class variables */
	yarp::os::BufferedPort<VectorOf<double>> _getChildBehaviourIn;
	yarp::os::BufferedPort<VectorOf<double>> _getChildPerformanceIn;
	yarp::os::BufferedPort<Bottle> _proposedToSupervisorIn;
	yarp::os::BufferedPort<Bottle> _smsSummaryIn;
	yarp::os::BufferedPort<Bottle> _selectedBySupervisorOut;
	yarp::os::BufferedPort<Bottle> _therapistCommandOut;
	yarp::os::BufferedPort<VectorOf<int>> _userIDOut;
	yarp::os::BufferedPort<Bottle> _interventionCommandOut;
	yarp::os::Port _handlerPort;

	/* pointer to a new thread */
	SystemGUIThread* _systemGUIThread;
   SystemGUIController* _systemGUIController;
   SystemGUIYarpInterface* _systemGUIYarpInterface;
public:
	/* class methods */
	bool configure(yarp::os::ResourceFinder &rf);
	bool interruptModule();
	bool close();
	bool respond(const yarp::os::Bottle& command, Bottle& reply);
	double getPeriod();
	bool updateModule();
};

#endif
