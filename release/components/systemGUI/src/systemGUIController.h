 /** @file systemGUIController.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent systemGUI
  * 
  * Main class with code, use the yarpInterface class to communicate with the other components.
  * 
  * \section lib_sec Libraries
  *
  * None
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <Hoang-Long Cao>, <Vrije Universiteit Brussel>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Hoang-Long Cao, Vrije Universiteit Brussel 
 * Email:   hoang.long.cao@vub.ac.be
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /* 
  * Audit Trail
  * -----------
  * 22/06/2016 Version 1.0: ... (Hoang-Long Cao)
  * 25/01/2017 Version 2.0: ... (Hoang-Long Cao)
  */ 
 
#ifndef SYSTEMGUICONTROLLER
#define SYSTEMGUICONTROLLER

#include <iostream>
#include <string>
#include <vector>
#include <math.h>
#include <ctime>
#include <stdio.h>

#define BOOST_FILESYSTEM_VERSION 3
#define BOOST_FILESYSTEM_NO_DEPRECATED 
#include <boost/filesystem.hpp>
#include <boost/thread/thread.hpp>
//#include <boost/asio.hpp>
//#include <boost/date_time/posix_time/posix_time.hpp>


//#if defined(WIN32) || defined(_WIN32) || defined(__WIN32) && !defined(__CYGWIN__)
#include <Windows.h>
//#endif
#include "guiUtilities.h"

#include <FL/Fl_Scroll.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_Menu.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Hold_Browser.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Progress.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Multi_Browser.H>
#include <FL/Fl_Output.H>

#include "buttonsLibrary.h"
#include "scriptManagerLibrary.h"
#include "userListLibrary.h"
#include "userDataLibrary.h"
#include "scriptMessages.h"
#include "actionMessages.h"
#include "actionOrigin.h"
#include "performanceMessages.h"

#define SYSTEMGUI_VERSION "2.0"

#define STRINGLENGTH 1024

// GUI dimensions:
#define GUI_WIDTH	1300
#define GUI_HEIGHT	780
#define GUI_X		50
#define GUI_Y		50+MENUBAR_HEIGHT

#define FALSE		0
#define TRUE		1

#define ICONS_FOLDER			"/icons/"
#define LOGS_FOLDER				"/logs/"
#define XML_FOLDER				"/data/"
#define SCRIPTMANAGER_FOLDER	"/scriptManager/config/"

#define USER_DATA_FOLDER		"/userModel/config/userdata/"
#define USER_LIST_FILENAME		"userlist.dream"

#define TIMER_VALUE			3

#define FULL				0
#define DATE				1
#define LOG					2

#define _NORMAL_			FL_BLACK
#define _WARNING_			FL_BLUE

using namespace std;

class SystemGUIYarpInterface;

class SystemGUIController{
private:
	SystemGUIYarpInterface* _yarpInterface;
	
	bool _debug;
	boost::thread *_tGUIloop, *_tTimerAction, *_tPerformAction, *_tStartSimulation;
	bool _isStopTimerAction;

	//
	char _modifiedString[STRINGLENGTH];
	
	/* GUI widgets */
	string _logoUrl, _iconUrl;
	Fl_PNG_Image *_logoImage;
	Fl_Group *_start_systemArchitecture_GUI;

	// LOAD USER
	Fl_Box *_box_loadUser;
	Fl_Choice *_choice_userName;
	string _userName, _userName_old;
	int _userID;
	vector<string> _userName_list;
	int _userName_choice_value;

	string _sUserDataFolder;
	string _sUserDataListFile;
	UserListLibrary _userList;
		
	Fl_Input *_textInput_sessionName;
	char _textInput_sessionName_value[STRINGLENGTH], _textInput_sessionName_value_old[STRINGLENGTH];
	Fl_Choice *_choice_sessionPartner;
	string _sessionPartner, _sessionPartner_old;
	int _sessionPartner_choice_value;
	Fl_Choice *_choice_scriptType;
	string _scriptType, _scriptType_old;
	int _scriptType_choice_value;

	Fl_Button *_button_loadUser;
	int _button_loadUser_value, _button_loadUser_value_old;
	string _dream_logoUrl;
	Fl_PNG_Image *_dream_logoImage;
	Fl_Button *_box_dreamLogo;	
	int _box_dreamLogo_value, _box_dreamLogo_value_old;;
	Fl_Box *_box_currentPerformance;
	user_interaction_data_t _currentUserInteractionData;
	string _currentPerformanceString;
	char _currentPerformanceDisplay[STRINGLENGTH];
	
	
	// TABS SUPERVISED CONTROL
	Fl_Tabs *_tabs_supervisedControl;
	Fl_Group *_tab_loadScript, *_tab_betweenScripts, *_tab_childHistory, *_tab_developerInfo;
	// Load Script
	string _scriptManager_folder;
	Fl_Group *_group_onScript;
	Fl_Scroll *_group_offScript;
	Fl_Choice *_choice_script;
	string _script, _script_old;
	ScriptLibrary _script_list_library;
	vector<string> _script_list;
	int _script_choice_value;
	double _scriptID,_scriptTypeID;
	vector<int> _currentScriptStepIDs;
	vector<string> _currentScriptSteps;
	vector<string> _currentScriptSteps_raw;
	Fl_Button *_button_loadScript;
	int _button_loadScript_value,_button_loadScript_value_old;
	Fl_Box *_box_connectionMessage;
	char _connectionMessage[STRINGLENGTH];
	bool _isRobotConnected, _isSandtrayConnected;
	bool _isScriptRunning;
	Fl_Text_Display *_list_scriptSteps;
	Fl_Text_Buffer *_list_scriptStepsBuffer;
	Fl_Value_Slider *_slider_Timer;
	double _timer_value_temp,_timer_value, _current_timer_value;
	int _button_updateSliderTimer_value, _button_updateSliderTimer_value_old;
	Fl_Button *_button_updateSliderTimer;

	//string _currentAction, _previousAction;
	vector<string> _proposedAction;
	int _proposedActionID;
	char _proposedActionText[STRINGLENGTH];

	vector<string> _currentAction;
	int _currentActionID;
	char _currentPerformActionText[STRINGLENGTH];

	int _currentStep, _currentStep_old;
	bool _isGoToNextStep;
	bool _isSimulationRunning;

	Fl_Group *_box_onScript, *_box_offScript;
	Fl_Progress *_progress_Timer;
	string _suggestionMessage, _suggestionLabel;
	char _progress_Timer_label[STRINGLENGTH];
	double _progress_Timer_value;
	Fl_Color _progress_bar_color;
	Fl_Box *_box_actionTime;
	string _actionTimeDisplay;
	Fl_Button *_button_doItNow, *_button_iWillChoose;
	int _button_doItNow_value, _button_iWillChoose_value;
	int _button_doItNow_value_old, _button_iWillChoose_value_old;
	vector<Fl_Button*> _buttons_offScript_fixed, _buttons_offScript_alwaysOn, _buttons_offScript_feedback, _buttons_offScript_scenario;
	vector<string> _buttons_offScript_fixed_text, _buttons_offScript_alwaysOn_text, _buttons_offScript_feedback_text, _buttons_offScript_scenario_text;
	vector<string> _buttons_offScript_fixed_icons, _buttons_offScript_alwaysOn_icons, _buttons_offScript_feedback_icons, _buttons_offScript_scenario_icons;
	vector<int> _buttons_offScript_fixed_color, _buttons_offScript_alwaysOn_color, _buttons_offScript_feedback_color,  _buttons_offScript_scenario_color;
	vector<string> _buttons_offScript_fixed_action, _buttons_offScript_alwaysOn_action, _buttons_offScript_feedback_action, _buttons_offScript_scenario_action;
	vector<int> _buttons_offScript_fixed_value, _buttons_offScript_alwaysOn_value, _buttons_offScript_feedback_value, _buttons_offScript_scenario_value;
	vector<int> _buttons_offScript_fixed_value_old, _buttons_offScript_alwaysOn_value_old, _buttons_offScript_feedback_value_old, _buttons_offScript_scenario_value_old;
	string _xml_folder;
	ButtonsLirary _button_offScript_fixed_library, _button_offScript_alwaysOn_library, _button_offScript_feedback_library, _button_offScript_scenario_library;
	// Between Scripts
	vector<Fl_Button*> _buttons_betweenScripts, _buttons_enableRobot;
	vector<string> _buttons_betweenScripts_text, _buttons_enableRobot_text;
	vector<string> _buttons_betweenScripts_icons, _buttons_enableRobot_icons;
	vector<string> _buttons_betweenScripts_action, _buttons_enableRobot_action;
	vector<int> _buttons_betweenScripts_value, _buttons_enableRobot_value;
	vector<int> _buttons_betweenScripts_value_old, _buttons_enableRobot_value_old;
	vector<int> _buttons_betweenScripts_color, _buttons_enableRobot_color;
	ButtonsLirary _button_betweenScripts_library, _button_enableRobot_library;


	// Variable for therapist mode - waiting for gaze/performance and receive gaze/performance
	bool _waitingForGaze, _waitingForPerf, _backFromWaitingForGazePerf, _backFromStepMod, _feedbackStep, _feedbackCorrected;

	Fl_Input *_textInput_say;
	char _textInput_say_value[STRINGLENGTH];
	Fl_Button *_button_say;
	int _button_say_value, _button_say_value_old;
	vector<Fl_Check_Button*> _checkButton_enableRAS;
	vector<string> _checkButton_enableRAS_text;
	vector<int> _checkButton_enableRAS_value, _checkButton_enableRAS_value_old;
	string _logUrl;

	// Child History
	Fl_Group *_box_childInfo;
	UserDataLibrary _userData;
	vector<Fl_Output*> _output_userData;
	vector<string> _output_userData_text;
	vector<string> _output_userData_value;

	Fl_Browser *_browser_childPerformance;
	vector<user_interaction_data_t> _userInteractionData;
	vector<string> _output_userHistory;
	//vector<string> _childPerformance_Session;
	//vector<int> _childPerformance_value;
	
	// Developer Info
	Fl_Text_Display *_list_developerInfo;
	Fl_Text_Buffer *_list_developerInfoBuffer;
	Fl_Button *_button_exportLogfile;
	int _button_exportLogfile_value, _button_exportLogfile_value_old;

	/* GUI initialization and main loop */
	void GUIinit(void);
	void GUIloop(void);	
	void GUIrefresh(void);	
	/* GUI events */
	void button_loadUser_Clicked();
	void button_loadScript_Clicked();
	void button_updateSliderTimer_Clicked();
	void buttons_onScript_Clicked();
	void buttons_offScript_Clicked();
	void buttons_betweenScripts_Clicked();
	void checkButton_enableRAS_Changed();
	void button_exportLogfile_Clicked();
	/* Other GUI functions */
	void resizeImage(string image_url, int w, int h,Fl_PNG_Image* &image);
	string actionTimeDisplay(double value);
	void logWrite(string info);
	string getCurrentTime(int type = FULL);
	void loadUserNames(void);
	void loadScripts(void);
	void loadScriptSteps(string script_value);
	void update_list_scriptSteps(int step);
	void loadFixedButtons(void);
	void loadAlwaysOnButtons(void);
	void loadFeedbackButtons(void);
	void loadScenarioButtons(void);
	void showOffscriptButtons(bool value);
	void loadBetweenScriptsButtons(void);
	void loadUserData(int iUserID);
	//void loadChildHistory(); merged with loadUserData
	void timerAction(void);
	void timerActionStart(void);
	void timerActionStop(void);
	void startSimulation(void);
	void performCurrentAction(void);
	void checkProposedAction(void);
	void goToNextStep(void);
	void timer_miliseconds(long time);	
	string calculateCurrentPerformance(string performance);
	void processOffscriptAction(string data, vector<string> &offscriptAction, char* offscriptActionText,int &offscriptActionID);
	void translateActionMessage(int actionID, vector<string> actionMessage, char* actionMessageDisplay);
	bool isZeroDelayAction(int actionID);
	bool isZeroDelayMoveAction(int moveID);
	void checkRefreshEvent(void);
	void checkLoadScriptChanged(void);
	void connectionMessage(string message, Fl_Color color);
	void checkConnections(void);
	std::string waitingArgument(std::vector<std::string > list);
	void sendFirstScriptStep();
	void goToNextScriptStep();
public:
	/* class methods */
	SystemGUIController(SystemGUIYarpInterface *yarpInterface, string logo);
   //Need to add the methods calling/being called by the YarpInterface
	void processSmsSummary(user_interaction_data_t data);
	void processProposedToSupervisor(string data);
};

/* GUI wiget callbacks*/
void userName_change_cb (Fl_Widget *b, void *destination);
void sessionPartner_change_cb(Fl_Widget *b, void *destination);
void scriptType_change_cb(Fl_Widget *b, void *destination);
void script_change_cb (Fl_Widget *b, void *destination);
void get_input_cb(Fl_Widget *b, void *input);
#endif


