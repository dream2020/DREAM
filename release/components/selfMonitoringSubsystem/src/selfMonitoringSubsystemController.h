 /** @file selfMonitoringSubsystemController.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent selfMonitoringSubsystem
  * 
  * Main class with code, use the yarpInterface class to communicate with the other components.
  * 
  * \section lib_sec Libraries
  *
  * None
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <James Kennedy>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  James Kennedy, Plymouth University 
 * Email:   james.kennedy@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /* 
  * Audit Trail
  * -----------
  * 04/07/2016 Version 1.0: ... (James Kennedy)
  */ 
 
#ifndef SELFMONITORINGSUBSYSTEMCONTROLLER
#define SELFMONITORINGSUBSYSTEMCONTROLLER

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <time.h>
#include <sstream>
#include <yarp/os/Thread.h>
#include <yarp/os/Mutex.h>

#include "userDataLibrary.h"
#include "actionMessages.h"
#include "performanceMessages.h"

using namespace yarp::os;

class SelfMonitoringSubsystemYarpInterface;

class SelfMonitoringSubsystemController{
private:
	SelfMonitoringSubsystemYarpInterface* _yarpInterface;

	std::ofstream _logFile;     // main log file
    std::string _sFileName;
    Mutex _logMutex;

	std::ofstream _wp5LogFile;  // wp5 log file (non-essential)
    std::string _sWP5FileName;
    Mutex _wp5Mutex;
	
	int _iUserID;
	int _iCurrentScript;
    int _iSessionID;
	std::vector<int> _iIntPerformance;
	std::vector<int> _iIntEngagement;
	std::vector<int> _iIntTurnPerformance;
    std::vector<int> _iWP5Performance;
	std::vector<int> _iWP5TurnTake;
	std::string _sSessionName;
	std::string _sInteractionPartner;
    std::string _logPath;
    int _iLastSessionID;
    int _iLastInteractionID;
	bool _bInteractionInProgress;
	user_interaction_data_t _currentInteraction;
	
public:
	/* class methods */
	SelfMonitoringSubsystemController(SelfMonitoringSubsystemYarpInterface *yarpInterface, string sContextPath);
    void clearCurrentInteraction();
	void addToLog(std::string sLogMessage);
	void addToWP5Log(std::string sLogMessage);
	std::string createLogFile(int iScriptId);
    void closeLogFiles();
	std::string getTimeStamp();
    void receiveUserData(UserDataLibrary userDataIn);
    void processTherapistCommand(string sCommand, double dblParameter);
	void processInterruption(int iInterruption);
	void notifyDelibAndSMStop();
    void processSupervisorSelection(int iDelibId, int iParam);
	int getCurrentPerformance();
    int getCurrentEngagement();
    int getCurrentTurnTake();
    int getCurrentWP5Perf();
	int getCurrentWP5TurnTake();
	user_interaction_data_t getCurrentInteractionData();
	std::string int2str(int iInput);
    std::string performanceArrayToString(std::vector<int> iPerformanceIn);
	void setInteractionPartner(std::string sPartner);
	void setSessionName(std::string sSession);
    void addToPerformance(int iPerformance);
    void addToEngagement(int iEngagement);
    void addToTurnTake(int iTurnTake);
    void addToWP5Perf(int iWP5Perf, int iWP5Checking);
};

#endif

