 /** @file selfMonitoringSubsystemYarpInterface.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_cognitiveComponent selfMonitoringSubsystem
  * 
  * Class used to provided a simpler interface between the main code and the YARP layer.
  * Provide an output function sending data for each port, and an input function called 
  * when a message is received on a port.
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section portsc_sec Ports Created
  *
  * <b>Port types </b>
  *
  *	BufferedPort<VectorOf<double>>		getChildBehaviourIn;
  *	BufferedPort<VectorOf<double>>		getChildPerformanceIn;
  *	BufferedPort<VectorOf<double>>		engagementFlagIn;
  *	BufferedPort<Bottle>		actionFeedbackIn;
  *	BufferedPort<VectorOf<int>>		fallingInterruptionIn;
  *	BufferedPort<VectorOf<int>>		getInterventionStatusIn;
  *	BufferedPort<Bottle>		deliberativeFeedbackIn;
  *	BufferedPort<Bottle>		interventionCommandIn;
  *	BufferedPort<Bottle>		sensorySummaryIn;
  *	BufferedPort<Bottle>		suggestedActionIn;
  *	BufferedPort<Bottle>		selectedBySupervisorIn;
  *	BufferedPort<Bottle>		therapistCommandIn;
  *	BufferedPort<Bottle>		userDataIn;
  *	BufferedPort<Bottle>		affectiveStateOut;
  *	BufferedPort<VectorOf<int>>		attentionSwitchOffOut;
  *	BufferedPort<VectorOf<int>>		reactionSwitchOffOut;
  *	BufferedPort<VectorOf<int>>		commandSuccessOut;
  *	BufferedPort<VectorOf<double>>		therapistGazeCommandOut;
  *	BufferedPort<Bottle>		selectedActionOut;
  *	BufferedPort<Bottle>		userDelibOut;
  *	BufferedPort<Bottle>		proposedToSupervisorOut;
  *	BufferedPort<Bottle>		smsSummaryOut;
  *	BufferedPort<VectorOf<int>>		startStopOut;
  *	BufferedPort<Bottle>		updatedDataOut;
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <James Kennedy>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  James Kennedy, Plymouth University 
 * Email:   james.kennedy@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /* 
  * Audit Trail
  * -----------
  * 04/07/2016 Version 1.0: ... (James Kennedy)
  */ 
 
#ifndef SELFMONITORINGSUBSYSTEMYARPINTERFACE
#define SELFMONITORINGSUBSYSTEMYARPINTERFACE

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

#include "userDataLibrary.h"
#include "actionMessages.h"

using namespace yarp::os; 
using namespace yarp::sig;

class SelfMonitoringSubsystemThread;
class SelfMonitoringSubsystemController;

class SelfMonitoringSubsystemYarpInterface{
private:
	SelfMonitoringSubsystemThread* _yarpThread;
	SelfMonitoringSubsystemController* _controller;

	double _dblLastEngagement;
public:
	/* class methods */
	SelfMonitoringSubsystemYarpInterface();
	void init(SelfMonitoringSubsystemThread* yarpThread, SelfMonitoringSubsystemController* controller);
	void getFromGetChildBehaviour(VectorOf<double> data);
	void getFromGetChildPerformance(VectorOf<double> data);
	void getFromEngagementFlag(VectorOf<double> data);
	void getFromActionFeedback(Bottle data);
	void getFromFallingInterruption(VectorOf<int> data);
	void getFromGetInterventionStatus(VectorOf<int> data);
	void getFromDeliberativeFeedback(Bottle data);
    void getFromInterventionCommand(Bottle data);
	void getFromSensorySummary(Bottle data);
	void getFromSuggestedAction(Bottle data);
	void getFromSelectedBySupervisor(Bottle data);
	void getFromTherapistCommand(Bottle data);
	void getFromUserData(Bottle dataIn);
	void sendToAffectiveState(Bottle data);
	void sendToAttentionSwitchOff(bool bSwitchOff);
	void sendToReactionSwitchOff(bool bSwitchOff);
	void sendToTherapistGazeCommand(int xCoord, int yCoord, int zCoord);
	void sendToSelectedAction(Bottle data);
	void sendToUserDelib(Bottle data);
	void sendToProposedToSupervisor(Bottle data);
    void sendToSmsSummary(user_interaction_data_t interactionData);
    void sendToStartStop(int iScriptId, int iStartStop);
	void sendToUpdatedData(user_interaction_data_t newInteraction);
	void sendToCommandSuccess(int iSuccess, int iScriptMod);
};

#endif
