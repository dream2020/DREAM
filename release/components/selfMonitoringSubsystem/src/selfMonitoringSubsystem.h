 /** @file selfMonitoringSubsystem.h Interface file for selfMonitoringSubsystem Component
  *
  * Version 1.0
  * 
  * 04/07/2016
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  * \section component_description Component Description
  *
  * Functionally, the component acts as a bridge between the GUI and the deliberative subsystem.
  * In future versions, the ethical check will be here, but for now, it mostly logs and keeps track of user data to send to the userModel.
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section parameters_sec Parameters
  * 
  * <b>Command-line Parameters </b> 
  * 
  * The following key-value pairs can be specified as command-line parameters 
  * by prefixing \c -- to the key e.g. \c --from file.ini. 
  * The value part can be changed to suit your needs; the default values are 
  * shown below. 
  *
  * - \c from \c selfMonitoringSubsystem.ini 
  *    - specifies the configuration file
  *
  * - \c context \c component/selfMonitoringSubsystem/configuration
  *   - specifies the sub-path from \c $DREAM_ROOT/release
  *   to the configuration file
  *
  * - \c name \c selfMonitoringSubsystem   
  *   - specifies the name of the component (used to form the stem of component port names)  
  *
  *
  * <b>Configuration File Parameters </b>
  *
  * The following key-value pairs can be specified as parameters in the configuration file 
  * (they can also be specified as command-line parameters if you so wish). 
  * The value part can be changed to suit your needs; the default values are shown below. 
  * 
  * Key | Value
  * :-- | :----  
  * _getChildBehaviourIn | /selfMonitoringSubsystem/getChildBehaviour:i
  * _getChildPerformanceIn | /selfMonitoringSubsystem/getChildPerformance:i
  * _engagementFlagIn | /selfMonitoringSubsystem/engagementFlag:i
  * _actionFeedbackIn | /selfMonitoringSubsystem/actionFeedback:i
  * _fallingInterruptionIn | /selfMonitoringSubsystem/fallingInterruption:i
  * _getInterventionStatusIn | /selfMonitoringSubsystem/getInterventionStatus:i
  * _deliberativeFeedbackIn | /selfMonitoringSubsystem/deliberativeFeedback:i
  * _interventionCommandIn | /selfMonitoringSubsystem/interventionCommand:i
  * _sensorySummaryIn | /selfMonitoringSubsystem/sensorySummary:i
  * _suggestedActionIn | /selfMonitoringSubsystem/suggestedAction:i
  * _selectedBySupervisorIn | /selfMonitoringSubsystem/selectedBySupervisor:i
  * _therapistCommandIn | /selfMonitoringSubsystem/therapistCommand:i
  * _userDataIn | /selfMonitoringSubsystem/userData:i
  *
  * - description
  *   
  * Key | Value
  * :-- | :---- 
  * _affectiveStateOut | /selfMonitoringSubsystem/affectiveState:o    
  * _attentionSwitchOffOut | /selfMonitoringSubsystem/attentionSwitchOff:o    
  * _reactionSwitchOffOut | /selfMonitoringSubsystem/reactionSwitchOff:o    
  * _therapistGazeCommandOut | /selfMonitoringSubsystem/therapistGazeCommand:o
  * _selectedActionOut | /selfMonitoringSubsystem/selectedAction:o    
  * _userDelibOut | /selfMonitoringSubsystem/userDelib:o    
  * _proposedToSupervisorOut | /selfMonitoringSubsystem/proposedToSupervisor:o    
  * _smsSummaryOut | /selfMonitoringSubsystem/smsSummary:o    
  * _startStopOut | /selfMonitoringSubsystem/startStop:o    
  * _updatedDataOut | /selfMonitoringSubsystem/updatedData:o    
  * _commandSuccessOut | /selfMonitoringSubsystem/commandSuccess:o
  *
  * - description
  *
  * \section portsa_sec Ports Accessed
  * 
  * - None
  *                      
  * \section portsc_sec Ports Created
  *
  * <b>Input ports</b>
  *
  *  - \c /selfMonitoringSubsystem
  *
  *  - \c /selfMonitoringSubsystem/getChildBehaviour:i
  *  - \c /selfMonitoringSubsystem/getChildPerformance:i
  *  - \c /selfMonitoringSubsystem/engagementFlag:i
  *  - \c /selfMonitoringSubsystem/actionFeedback:i
  *  - \c /selfMonitoringSubsystem/fallingInterruption:i
  *  - \c /selfMonitoringSubsystem/getInterventionStatus:i
  *  - \c /selfMonitoringSubsystem/deliberativeFeedback:i
  *  - \c /selfMonitoringSubsystem/interventionCommand:i
  *  - \c /selfMonitoringSubsystem/sensorySummary:i
  *  - \c /selfMonitoringSubsystem/suggestedAction:i
  *  - \c /selfMonitoringSubsystem/selectedBySupervisor:i
  *  - \c /selfMonitoringSubsystem/therapistCommand:i
  *  - \c /selfMonitoringSubsystem/userData:i
  *
  * <b>Output ports</b>
  *
  *  - \c /selfMonitoringSubsystem
  *
  *  - \c /selfMonitoringSubsystem/affectiveState:o
  *  - \c /selfMonitoringSubsystem/attentionSwitchOff:o
  *  - \c /selfMonitoringSubsystem/reactionSwitchOff:o
  *  - \c /selfMonitoringSubsystem/therapistGazeCommand:o
  *  - \c /selfMonitoringSubsystem/selectedAction:o
  *  - \c /selfMonitoringSubsystem/userDelib:o
  *  - \c /selfMonitoringSubsystem/proposedToSupervisor:o
  *  - \c /selfMonitoringSubsystem/smsSummary:o
  *  - \c /selfMonitoringSubsystem/startStop:o
  *  - \c /selfMonitoringSubsystem/updatedData:o
  *  - \c /selfMonitoringSubsystem/commandSuccess:o
  *
  * <b>Port types </b>
  *
  * The functional specification only names the ports to be used to communicate with the component 
  * but doesn't say anything about the data transmitted on the ports. This is defined by the following code. 
  *
  * \c BufferedPort<VectorOf<double>>		getChildBehaviourIn; 
  * \c BufferedPort<VectorOf<double>>		getChildPerformanceIn; 
  * \c BufferedPort<VectorOf<double>>		engagementFlagIn; 
  * \c BufferedPort<Bottle>		actionFeedbackIn; 
  * \c BufferedPort<VectorOf<int>>		fallingInterruptionIn; 
  * \c BufferedPort<VectorOf<int>>		getInterventionStatusIn; 
  * \c BufferedPort<Bottle>		deliberativeFeedbackIn;
  * \c BufferedPort<Bottle>		interventionCommandIn;
  * \c BufferedPort<Bottle>		sensorySummaryIn; 
  * \c BufferedPort<Bottle>		suggestedActionIn; 
  * \c BufferedPort<Bottle>		selectedBySupervisorIn; 
  * \c BufferedPort<Bottle>		therapistCommandIn; 
  * \c BufferedPort<Bottle>		userDataIn; 
  * \c BufferedPort<Bottle>		affectiveStateOut; 
  * \c BufferedPort<VectorOf<int>>		attentionSwitchOffOut; 
  * \c BufferedPort<VectorOf<int>>		reactionSwitchOffOut; 
  * \c BufferedPort<VectorOf<double>>		therapistGazeCommandOut; 
  * \c BufferedPort<Bottle>		selectedActionOut; 
  * \c BufferedPort<Bottle>		userDelibOut; 
  * \c BufferedPort<Bottle>		proposedToSupervisorOut; 
  * \c BufferedPort<Bottle>		smsSummaryOut; 
  * \c BufferedPort<VectorOf<int>>		startStopOut; 
  * \c BufferedPort<Bottle>		updatedDataOut; 
  * \c BufferedPort<VectorOf<int>>		commandSuccessOut; 
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \section conf_file_sec Configuration Files
  *
  * \c selfMonitoringSubsystem.ini   
  *
  * \section example_sec Example Instantiation of the Component
  * 
  * <tt>selfMonitoringSubsystem --name selfMonitoringSubsystem --context selfMonitoringSubsystem/config --from selfMonitoringSubsystem.ini </tt>
  *
  * \author 
  * 
  * <James Kennedy>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */
  
/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  James Kennedy, Plymouth University 
 * Email:   james.kennedy@plymouth.ac.uk 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
  
 /* 
  * Audit Trail
  * -----------
  * 04/07/2016 Version 1.0: ... (James Kennedy)
  */ 
 
#ifndef SELFMONITORINGSUBSYSTEM
#define SELFMONITORINGSUBSYSTEM

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class SelfMonitoringSubsystemYarpInterface;
class SelfMonitoringSubsystemController;

class GetChildBehaviourInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getChildBehaviourInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class GetChildPerformanceInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& getChildPerformanceInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class EngagementFlagInAnalyser : public BufferedPort<VectorOf<double>>{
   virtual void onRead(VectorOf<double>& engagementFlagInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class ActionFeedbackInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& actionFeedbackInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class FallingInterruptionInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& fallingInterruptionInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class GetInterventionStatusInAnalyser : public BufferedPort<VectorOf<int>>{
   virtual void onRead(VectorOf<int>& getInterventionStatusInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class DeliberativeFeedbackInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& deliberativeFeedbackInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class InterventionCommandInAnalyser : public BufferedPort<Bottle> {
    virtual void onRead(Bottle& interventionCommandInData);
    SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
    void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class SensorySummaryInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& sensorySummaryInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class SuggestedActionInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& suggestedActionInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class SelectedBySupervisorInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& selectedBySupervisorInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class TherapistCommandInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& therapistCommandInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};

class UserDataInAnalyser : public BufferedPort<Bottle>{
   virtual void onRead(Bottle& userDataInData);
   SelfMonitoringSubsystemYarpInterface *_selfMonitoringSubsystemYarpInterface;
public:
   void setSelfMonitoringSubsystem(SelfMonitoringSubsystemYarpInterface* yarpInterface);
};



class SelfMonitoringSubsystemThread : public yarp::os::Thread{
private:
	/* class variables */
	yarp::os::BufferedPort<VectorOf<double>>* _getChildBehaviourIn;
	yarp::os::BufferedPort<VectorOf<double>>* _getChildPerformanceIn;
	yarp::os::BufferedPort<VectorOf<double>>* _engagementFlagIn;
	yarp::os::BufferedPort<Bottle>* _actionFeedbackIn;
	yarp::os::BufferedPort<VectorOf<int>>* _fallingInterruptionIn;
	yarp::os::BufferedPort<VectorOf<int>>* _getInterventionStatusIn;
	yarp::os::BufferedPort<Bottle>* _deliberativeFeedbackIn;
    yarp::os::BufferedPort<Bottle>* _interventionCommandIn;
	yarp::os::BufferedPort<Bottle>* _sensorySummaryIn;
	yarp::os::BufferedPort<Bottle>* _suggestedActionIn;
	yarp::os::BufferedPort<Bottle>* _selectedBySupervisorIn;
	yarp::os::BufferedPort<Bottle>* _therapistCommandIn;
	yarp::os::BufferedPort<Bottle>* _userDataIn;
	yarp::os::BufferedPort<Bottle>* _affectiveStateOut;
	yarp::os::BufferedPort<VectorOf<int>>* _attentionSwitchOffOut;
	yarp::os::BufferedPort<VectorOf<int>>* _reactionSwitchOffOut;
	yarp::os::BufferedPort<VectorOf<double>>* _therapistGazeCommandOut;
	yarp::os::BufferedPort<Bottle>* _selectedActionOut;
	yarp::os::BufferedPort<Bottle>* _userDelibOut;
	yarp::os::BufferedPort<Bottle>* _proposedToSupervisorOut;
	yarp::os::BufferedPort<Bottle>* _smsSummaryOut;
	yarp::os::BufferedPort<VectorOf<int>>* _startStopOut;
	yarp::os::BufferedPort<Bottle>* _updatedDataOut;
	yarp::os::BufferedPort<VectorOf<int>>* _commandSuccessOut;
	SelfMonitoringSubsystemYarpInterface* _yarpInterface;
	GetChildBehaviourInAnalyser *_getChildBehaviourInAnalyser;
	GetChildPerformanceInAnalyser *_getChildPerformanceInAnalyser;
	EngagementFlagInAnalyser *_engagementFlagInAnalyser;
    InterventionCommandInAnalyser *_interventionCommandInAnalyser;
	ActionFeedbackInAnalyser *_actionFeedbackInAnalyser;
	FallingInterruptionInAnalyser *_fallingInterruptionInAnalyser;
	GetInterventionStatusInAnalyser *_getInterventionStatusInAnalyser;
	DeliberativeFeedbackInAnalyser *_deliberativeFeedbackInAnalyser;
	SensorySummaryInAnalyser *_sensorySummaryInAnalyser;
	SuggestedActionInAnalyser *_suggestedActionInAnalyser;
	SelectedBySupervisorInAnalyser *_selectedBySupervisorInAnalyser;
	TherapistCommandInAnalyser *_therapistCommandInAnalyser;
	UserDataInAnalyser *_userDataInAnalyser;
	
public:
	/* class methods */
	SelfMonitoringSubsystemThread(BufferedPort<VectorOf<double>>* getChildBehaviourIn, BufferedPort<VectorOf<double>>* getChildPerformanceIn, BufferedPort<VectorOf<double>>* engagementFlagIn, BufferedPort<Bottle>* actionFeedbackIn, BufferedPort<VectorOf<int>>* fallingInterruptionIn, BufferedPort<VectorOf<int>>* getInterventionStatusIn, BufferedPort<Bottle>* deliberativeFeedbackIn, BufferedPort<Bottle>* sensorySummaryIn, BufferedPort<Bottle>* suggestedActionIn, BufferedPort<Bottle>* selectedBySupervisorIn, BufferedPort<Bottle>* therapistCommandIn, BufferedPort<Bottle>* userDataIn, BufferedPort<Bottle>* interventionCommandIn, BufferedPort<Bottle>* affectiveStateOut, BufferedPort<VectorOf<int>>* attentionSwitchOffOut, BufferedPort<VectorOf<int>>* reactionSwitchOffOut, BufferedPort<VectorOf<double>>* therapistGazeCommandOut, BufferedPort<Bottle>* selectedActionOut, BufferedPort<Bottle>* userDelibOut, BufferedPort<Bottle>* proposedToSupervisorOut, BufferedPort<Bottle>* smsSummaryOut, BufferedPort<VectorOf<int>>* startStopOut, BufferedPort<Bottle>* updatedDataOut, BufferedPort<VectorOf<int>>* commandSuccessOut);
   void setYarpInterface(SelfMonitoringSubsystemYarpInterface* yarpInterface);
	bool threadInit();
	void threadRelease();
	void sendToAffectiveState(Bottle data);
	void sendToAttentionSwitchOff(VectorOf<int> data);
	void sendToReactionSwitchOff(VectorOf<int> data);
	void sendToTherapistGazeCommand(VectorOf<double> data);
	void sendToSelectedAction(Bottle data);
	void sendToUserDelib(Bottle data);
	void sendToProposedToSupervisor(Bottle data);
	void sendToSmsSummary(Bottle data);
	void sendToStartStop(VectorOf<int> data);
	void sendToUpdatedData(Bottle data);
	void sendToCommandSuccess(VectorOf<int> data);
	void run();
};

class SelfMonitoringSubsystem : public yarp::os::RFModule{
private:
	/* module parameters */
	std::string _moduleName;
	std::string _getChildBehaviourInName;
	std::string _getChildPerformanceInName;
	std::string _engagementFlagInName;
	std::string _actionFeedbackInName;
	std::string _fallingInterruptionInName;
	std::string _getInterventionStatusInName;
	std::string _deliberativeFeedbackInName;
    std::string _interventionCommandInName;
	std::string _sensorySummaryInName;
	std::string _suggestedActionInName;
	std::string _selectedBySupervisorInName;
	std::string _therapistCommandInName;
	std::string _userDataInName;
	std::string _affectiveStateOutName;
	std::string _attentionSwitchOffOutName;
	std::string _reactionSwitchOffOutName;
	std::string _therapistGazeCommandOutName;
	std::string _selectedActionOutName;
	std::string _userDelibOutName;
	std::string _proposedToSupervisorOutName;
	std::string _smsSummaryOutName;
	std::string _startStopOutName;
	std::string _updatedDataOutName;
	std::string _commandSuccessOutName;
	std::string _handlerPortName;

	/* class variables */
	yarp::os::BufferedPort<VectorOf<double>> _getChildBehaviourIn;
	yarp::os::BufferedPort<VectorOf<double>> _getChildPerformanceIn;
	yarp::os::BufferedPort<VectorOf<double>> _engagementFlagIn;
	yarp::os::BufferedPort<Bottle> _actionFeedbackIn;
	yarp::os::BufferedPort<VectorOf<int>> _fallingInterruptionIn;
	yarp::os::BufferedPort<VectorOf<int>> _getInterventionStatusIn;
	yarp::os::BufferedPort<Bottle> _deliberativeFeedbackIn;
    yarp::os::BufferedPort<Bottle> _interventionCommandIn;
	yarp::os::BufferedPort<Bottle> _sensorySummaryIn;
	yarp::os::BufferedPort<Bottle> _suggestedActionIn;
	yarp::os::BufferedPort<Bottle> _selectedBySupervisorIn;
	yarp::os::BufferedPort<Bottle> _therapistCommandIn;
	yarp::os::BufferedPort<Bottle> _userDataIn;
	yarp::os::BufferedPort<Bottle> _affectiveStateOut;
	yarp::os::BufferedPort<VectorOf<int>> _attentionSwitchOffOut;
	yarp::os::BufferedPort<VectorOf<int>> _reactionSwitchOffOut;
	yarp::os::BufferedPort<VectorOf<double>> _therapistGazeCommandOut;
	yarp::os::BufferedPort<Bottle> _selectedActionOut;
	yarp::os::BufferedPort<Bottle> _userDelibOut;
	yarp::os::BufferedPort<Bottle> _proposedToSupervisorOut;
	yarp::os::BufferedPort<Bottle> _smsSummaryOut;
	yarp::os::BufferedPort<VectorOf<int>> _startStopOut;
	yarp::os::BufferedPort<Bottle> _updatedDataOut;
	yarp::os::BufferedPort<VectorOf<int>> _commandSuccessOut;
	yarp::os::Port _handlerPort;

	/* pointer to a new thread */
	SelfMonitoringSubsystemThread* _selfMonitoringSubsystemThread;
   SelfMonitoringSubsystemController* _selfMonitoringSubsystemController;
   SelfMonitoringSubsystemYarpInterface* _selfMonitoringSubsystemYarpInterface;
public:
	/* class methods */
	bool configure(yarp::os::ResourceFinder &rf);
	bool interruptModule();
	bool close();
	bool respond(const yarp::os::Bottle& command, Bottle& reply);
	double getPeriod();
	bool updateModule();
};

#endif
