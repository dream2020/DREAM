 /** @file actuationSubsystemYarpInterface.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  *
  * \defgroup DREAM_actuationSubsystem actuationSubsystem
  * 
  * Class used to provided a simpler interface between the main code and the YARP layer.
  * Provide an output function sending data for each port, and an input function called 
  * when a message is received on a port.
  * 
  * \section lib_sec Libraries
  *
  * - YARP.
  *
  * \section portsc_sec Ports Created
  *
  * <b>Port types </b>
  *
  *	BufferedPort<Bottle>		eyeBlinkingIn;
  *	BufferedPort<VectorOf<int>>		fallingReactionIn;
  *	BufferedPort<VectorOf<int>>		fallingReactionSpeechIn;
  *	BufferedPort<VectorOf<int>>		socialFacialExpressionIn;
  *	BufferedPort<VectorOf<int>>		socialReactionIn;
  *	BufferedPort<VectorOf<int>>		socialReactionSpeechIn;
  *	BufferedPort<VectorOf<int>>		fallingInterruptionIn;
  *	BufferedPort<VectorOf<double>>		elicitedAttentionIn;
  *	BufferedPort<Bottle>		robotMotorFeedbackIn;
  *	BufferedPort<Bottle>		selectedActionIn;
  *	BufferedPort<Bottle>		sandtrayReturnIn;
  *	BufferedPort<Bottle>		sensorFeedbackIn;
  *	BufferedPort<Bottle>		emergencyIn;
  *	BufferedPort<Bottle>		robotSensorsOut;
  *	BufferedPort<VectorOf<int>>		disableRobotOut;
  *	BufferedPort<VectorOf<int>>		enableRobotOut;
  *	BufferedPort<VectorOf<int>>		gripOut;
  *	BufferedPort<VectorOf<double>>		moveHandOut;
  *	BufferedPort<VectorOf<double>>		moveHeadOut;
  *	BufferedPort<VectorOf<int>>		moveSequenceOut;
  *	BufferedPort<VectorOf<double>>		moveTorsoOut;
  *	BufferedPort<VectorOf<float>>		pointAtOut;
  *	BufferedPort<VectorOf<int>>		releaseOut;
  *	BufferedPort<Bottle>		sayOut;
  *	BufferedPort<Bottle>		sandtrayCommandOut;
  *	BufferedPort<Bottle>		actionFeedbackOut;
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <Emmanuel Senft>, <Plymouth University>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Emmanuel Senft, Plymouth University 
 * Email:   emmanuel.senft@plymouth.ac.uk  
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /* 
  * Audit Trail
  * -----------
  * 31/10/2016 Version 1.0: ... (Emmanuel Senft)
  */ 
 
#ifndef ACTUATIONSUBSYSTEMYARPINTERFACE
#define ACTUATIONSUBSYSTEMYARPINTERFACE

#include <iostream>
#include <string>
#include <vector>

#include <yarp/sig/all.h>
#include <yarp/os/all.h>
#include <yarp/os/RFModule.h>
#include <yarp/os/Network.h>
#include <yarp/os/Thread.h>

using namespace yarp::os; 
using namespace yarp::sig;

class ActuationSubsystemThread;
class ActuationSubsystemController;

class ActuationSubsystemYarpInterface{
private:
	ActuationSubsystemThread* _yarpThread;
   ActuationSubsystemController* _controller;
public:
	/* class methods */
	ActuationSubsystemYarpInterface();
   void init(ActuationSubsystemThread* yarpThread, ActuationSubsystemController* controller);
	void getFromEyeBlinking(Bottle data);
	void getFromFallingReaction(VectorOf<int> data);
	void getFromFallingReactionSpeech(VectorOf<int> data);
	void getFromSocialFacialExpression(VectorOf<int> data);
	void getFromSocialReaction(VectorOf<int> data);
	void getFromSocialReactionSpeech(VectorOf<int> data);
	void getFromRobotMotorFeedback(Bottle data);
	void getFromSelectedAction(Bottle data);
	void getFromSandtrayReturn(Bottle data);
	void getFromSensorFeedback(Bottle data);
	void getFromFallingInterruption(VectorOf<int> data);
	void getFromElicitedAttention(VectorOf<double> data);
	void getFromEmergency(Bottle data);
	void sendToDisableRobot(int stepId);
	void sendToDisableRobot(int stepId, int param);
	void sendToEnableRobot(int stepId);
	void sendToGrip(bool rightArm, int stepId);
	void sendToMoveHand(bool rightHand, float x, float y, float z, float roll, int stepId);
	void sendToMoveHead(float x, float y, float z, float speed, float stepId);
	void sendToMoveSequence(int stepId, int seqId);
	void sendToMoveSequence(int stepId, int seqId, int arg1, int arg2, int arg3);
	void sendToMoveTorso(VectorOf<double> data);
	void sendToPointAt(std::vector<std::vector<float>> points, bool rightArm, int stepId);
	void sendToPointAt(std::vector<float> points, bool rightArm, int stepId);
	void sendToRelease(bool rightArm, int stepId);
	void sendToSay(int stepId, std::string sentence);
	void sendToSandtrayCommand(std::string command, std::string parameter);
	void sendToActionFeedback(int stepId, int actionId, int fbValue, bool subAction, int parameter = -1);
	void sendToRobotSensors(std::string name, bool value);
};

#endif
