 /** @file assessChildPerformanceController.h 
  *
  * Version 1.0
  * 
  * Generated by YarpGenerator, Emmanuel Senft, PLYM
  *
  * \defgroup DREAM_assessChildPerformance assessChildPerformance
  * 
  * Main class with code, use the yarpInterface class to communicate with the other components.
  * 
  * \section lib_sec Libraries
  *
  * None
  *
  * \section in_files_sec Input Data Files
  *
  * None
  *
  * \section out_data_sec Output Data Files
  *
  * None
  *
  * \author 
  * 
  * <Serge Thill>, <University of Skövde>  
  * 
  * Copyright (C) 2014 DREAM Consortium
  * 
  */

/* 
 * Copyright (C) 2014 DREAM Consortium
 * FP7 Project 611391 co-funded by the European Commission
 *
 * Author:  Serge Thill, University of Skövde 
 * Email:   serge.thill@his.se 
 * Website: www.dream2020.eu 
 * 
 * This file is part of DREAM.
 * 
 * DREAM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * DREAM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DREAM.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 /* 
  * Audit Trail
  * -----------
  * 08/11/2016 Version 1.0: ... (Serge Thill)
  */ 
 
#ifndef ASSESSCHILDPERFORMANCECONTROLLER
#define ASSESSCHILDPERFORMANCECONTROLLER

#include <iostream>
#include <string>
#include <vector>



class AssessChildPerformanceYarpInterface;

class AssessChildPerformanceController{
private:
	AssessChildPerformanceYarpInterface* _yarpInterface;
	int _expected_sandtray_event;
	int _expected_sa_event;
	int _expected_pose_event;
	int _expected_gaze_event;
	int _expected_voice_event;
	
	std::vector<std::vector<double> > _eyeGaze; 

	double _rt;
	double _performance;

	int _printlogs;

	double _posetrack[30];
	double _headPosition[3];	// for head x, y, z

	int _traj_vector_count[12]; // for summing trajectory vectors as they come in
	int _sum_traj_events; //total number (for that event) of trajectory events received
	double _traj_count_start; // start time of tracjectory vector summation.
	double _traj_thrs[12];

	void reset_state();
	int empty_pose_check();
	double pose_rmse(double pose[]);
	int no_movement(double pose[]);
	double check_pointing(double pose[]);
	void copy_pose(double pose[]);
	int check_time();
	int check_no_sandtray();
	double mean(std::vector<double> vec);

public:
	/* class methods */
	AssessChildPerformanceController(AssessChildPerformanceYarpInterface *yarpInterface);

	void gotTrajectory(double traj[]);
	void gotSandtray(int sandtray_event);
	void gotVoice(int voice_id);
	void gotGaze(double xData, double yData, double zData);
	void gotPose(double pose[]);

	void checkSA(int behaviour, int expected_rt);
	void checkSandtray(int interaction, int expected_rt);
	void checkOther(int behaviour, int expected_rt);
	void logevents(std::string);

	double sandtray_edge;
	double sandtray_offset;
	int flip_lr;

	double traj_min_wait;


	double wave_thr;
  	double cover_thr;
   	double hands_head_thr;
  	double fly_thr;
   	double drive_thr;
  	double smell_thr;
   	double traj1_thr;
  	double traj2_thr;
  	double traj3_thr;
   	double traj4_thr;
   	double traj5_thr;




};
#endif
